
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025fc  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005dc  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000205dc  2**0
                  CONTENTS
  8 .bss          000002d8  200005dc  200005dc  000205dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200008b4  200008b4  000205dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000205dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00063d44  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003fe8  00000000  00000000  00084350  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00022c82  00000000  00000000  00088338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  000aafc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002100  00000000  00000000  000acef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000096fe  00000000  00000000  000aeff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000f70c  00000000  00000000  000b86ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c7dfa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000653c  00000000  00000000  000c7e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005dc 	.word	0x200005dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002834 	.word	0x08002834

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005e0 	.word	0x200005e0
 80001c4:	08002834 	.word	0x08002834

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	200005d8 	.word	0x200005d8
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 f8e0 	bl	800270c <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200007a0 	.word	0x200007a0
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200007a0 	.word	0x200007a0

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800067c:	f023 0303 	bic.w	r3, r3, #3
 8000680:	2118      	movs	r1, #24
 8000682:	3a10      	subs	r2, #16
 8000684:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000688:	4904      	ldr	r1, [pc, #16]	; (800069c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800068a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800068c:	bf88      	it	hi
 800068e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000690:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000692:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000694:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000696:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	0800284c 	.word	0x0800284c

080006a0 <HAL_DMA_Init>:
{
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ff62 	bl	800056c <HAL_GetTick>
 80006a8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006aa:	2c00      	cmp	r4, #0
 80006ac:	d071      	beq.n	8000792 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006ae:	2300      	movs	r3, #0
 80006b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006b4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006c4:	6821      	ldr	r1, [r4, #0]
 80006c6:	680b      	ldr	r3, [r1, #0]
 80006c8:	07d8      	lsls	r0, r3, #31
 80006ca:	d43c      	bmi.n	8000746 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006cc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006ce:	4d32      	ldr	r5, [pc, #200]	; (8000798 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006d0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006d2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006d4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006d6:	68a3      	ldr	r3, [r4, #8]
 80006d8:	4313      	orrs	r3, r2
 80006da:	68e2      	ldr	r2, [r4, #12]
 80006dc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006de:	6922      	ldr	r2, [r4, #16]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	6962      	ldr	r2, [r4, #20]
 80006e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006e6:	69e2      	ldr	r2, [r4, #28]
 80006e8:	4303      	orrs	r3, r0
 80006ea:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006ec:	6a22      	ldr	r2, [r4, #32]
 80006ee:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006f2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006f4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006f8:	bf01      	itttt	eq
 80006fa:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80006fc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80006fe:	4335      	orreq	r5, r6
 8000700:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000702:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000704:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000706:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000708:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800070c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000710:	d10b      	bne.n	800072a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000714:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000716:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000718:	b13d      	cbz	r5, 800072a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800071a:	b9f8      	cbnz	r0, 800075c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800071c:	2a01      	cmp	r2, #1
 800071e:	d02d      	beq.n	800077c <HAL_DMA_Init+0xdc>
 8000720:	d301      	bcc.n	8000726 <HAL_DMA_Init+0x86>
 8000722:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000724:	d101      	bne.n	800072a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000726:	01ea      	lsls	r2, r5, #7
 8000728:	d42b      	bmi.n	8000782 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800072a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800072c:	4620      	mov	r0, r4
 800072e:	f7ff ffa1 	bl	8000674 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000732:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000734:	233f      	movs	r3, #63	; 0x3f
 8000736:	4093      	lsls	r3, r2
 8000738:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800073a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800073c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800073e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000740:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000744:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000746:	f7ff ff11 	bl	800056c <HAL_GetTick>
 800074a:	1b40      	subs	r0, r0, r5
 800074c:	2805      	cmp	r0, #5
 800074e:	d9b9      	bls.n	80006c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000750:	2320      	movs	r3, #32
 8000752:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000754:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000756:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800075a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800075c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000760:	d113      	bne.n	800078a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000762:	2a03      	cmp	r2, #3
 8000764:	d8e1      	bhi.n	800072a <HAL_DMA_Init+0x8a>
 8000766:	a001      	add	r0, pc, #4	; (adr r0, 800076c <HAL_DMA_Init+0xcc>)
 8000768:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800076c:	08000783 	.word	0x08000783
 8000770:	08000727 	.word	0x08000727
 8000774:	08000783 	.word	0x08000783
 8000778:	0800077d 	.word	0x0800077d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800077c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000780:	d1d3      	bne.n	800072a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000786:	2001      	movs	r0, #1
 8000788:	e7e5      	b.n	8000756 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800078a:	2a02      	cmp	r2, #2
 800078c:	d9f9      	bls.n	8000782 <HAL_DMA_Init+0xe2>
 800078e:	2a03      	cmp	r2, #3
 8000790:	e7c8      	b.n	8000724 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000792:	2001      	movs	r0, #1
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	bf00      	nop
 8000798:	f010803f 	.word	0xf010803f

0800079c <HAL_DMA_IRQHandler>:
{
 800079c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800079e:	2300      	movs	r3, #0
 80007a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007a2:	4b5a      	ldr	r3, [pc, #360]	; (800090c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007a4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80007a6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80007aa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ac:	2208      	movs	r2, #8
 80007ae:	409a      	lsls	r2, r3
 80007b0:	4216      	tst	r6, r2
{
 80007b2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b4:	d00c      	beq.n	80007d0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007b6:	6801      	ldr	r1, [r0, #0]
 80007b8:	6808      	ldr	r0, [r1, #0]
 80007ba:	0740      	lsls	r0, r0, #29
 80007bc:	d508      	bpl.n	80007d0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007be:	6808      	ldr	r0, [r1, #0]
 80007c0:	f020 0004 	bic.w	r0, r0, #4
 80007c4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007c6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80007c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007ca:	f042 0201 	orr.w	r2, r2, #1
 80007ce:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80007d0:	2201      	movs	r2, #1
 80007d2:	409a      	lsls	r2, r3
 80007d4:	4216      	tst	r6, r2
 80007d6:	d008      	beq.n	80007ea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80007d8:	6821      	ldr	r1, [r4, #0]
 80007da:	6949      	ldr	r1, [r1, #20]
 80007dc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80007de:	bf41      	itttt	mi
 80007e0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80007e2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007e4:	f042 0202 	orrmi.w	r2, r2, #2
 80007e8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ea:	2204      	movs	r2, #4
 80007ec:	409a      	lsls	r2, r3
 80007ee:	4216      	tst	r6, r2
 80007f0:	d008      	beq.n	8000804 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80007f2:	6821      	ldr	r1, [r4, #0]
 80007f4:	6809      	ldr	r1, [r1, #0]
 80007f6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80007f8:	bf41      	itttt	mi
 80007fa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80007fc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007fe:	f042 0204 	orrmi.w	r2, r2, #4
 8000802:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000804:	2210      	movs	r2, #16
 8000806:	409a      	lsls	r2, r3
 8000808:	4216      	tst	r6, r2
 800080a:	d010      	beq.n	800082e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	0709      	lsls	r1, r1, #28
 8000812:	d50c      	bpl.n	800082e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000814:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	0350      	lsls	r0, r2, #13
 800081a:	d535      	bpl.n	8000888 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	0319      	lsls	r1, r3, #12
 8000820:	d401      	bmi.n	8000826 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000824:	e000      	b.n	8000828 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000826:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000828:	b10b      	cbz	r3, 800082e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800082a:	4620      	mov	r0, r4
 800082c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800082e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000830:	2220      	movs	r2, #32
 8000832:	408a      	lsls	r2, r1
 8000834:	4216      	tst	r6, r2
 8000836:	d038      	beq.n	80008aa <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	06c6      	lsls	r6, r0, #27
 800083e:	d534      	bpl.n	80008aa <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000840:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000842:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000846:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000848:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800084a:	d125      	bne.n	8000898 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800084c:	f022 0216 	bic.w	r2, r2, #22
 8000850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000858:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800085a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800085c:	b90a      	cbnz	r2, 8000862 <HAL_DMA_IRQHandler+0xc6>
 800085e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000860:	b11a      	cbz	r2, 800086a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	f022 0208 	bic.w	r2, r2, #8
 8000868:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800086a:	233f      	movs	r3, #63	; 0x3f
 800086c:	408b      	lsls	r3, r1
 800086e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000870:	2300      	movs	r3, #0
 8000872:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000876:	2301      	movs	r3, #1
 8000878:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800087c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800087e:	b10b      	cbz	r3, 8000884 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000880:	4620      	mov	r0, r4
 8000882:	4798      	blx	r3
}
 8000884:	b003      	add	sp, #12
 8000886:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800088c:	bf5e      	ittt	pl
 800088e:	681a      	ldrpl	r2, [r3, #0]
 8000890:	f022 0208 	bicpl.w	r2, r2, #8
 8000894:	601a      	strpl	r2, [r3, #0]
 8000896:	e7c4      	b.n	8000822 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000898:	0350      	lsls	r0, r2, #13
 800089a:	d528      	bpl.n	80008ee <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	0319      	lsls	r1, r3, #12
 80008a0:	d432      	bmi.n	8000908 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80008a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80008a4:	b10b      	cbz	r3, 80008aa <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80008a6:	4620      	mov	r0, r4
 80008a8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0e9      	beq.n	8000884 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b2:	07da      	lsls	r2, r3, #31
 80008b4:	d519      	bpl.n	80008ea <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008b6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008b8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80008ca:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80008ce:	9b01      	ldr	r3, [sp, #4]
 80008d0:	3301      	adds	r3, #1
 80008d2:	429f      	cmp	r7, r3
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	d302      	bcc.n	80008de <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008d8:	6813      	ldr	r3, [r2, #0]
 80008da:	07db      	lsls	r3, r3, #31
 80008dc:	d4f7      	bmi.n	80008ce <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80008de:	2300      	movs	r3, #0
 80008e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80008ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80008ec:	e7c7      	b.n	800087e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80008f4:	d108      	bne.n	8000908 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80008f6:	6819      	ldr	r1, [r3, #0]
 80008f8:	f021 0110 	bic.w	r1, r1, #16
 80008fc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80008fe:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000900:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000904:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800090a:	e7cb      	b.n	80008a4 <HAL_DMA_IRQHandler+0x108>
 800090c:	200005d8 	.word	0x200005d8

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000914:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ac8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800091c:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000acc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000924:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000926:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000928:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800092a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800092e:	42ac      	cmp	r4, r5
 8000930:	f040 80b0 	bne.w	8000a94 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	684c      	ldr	r4, [r1, #4]
 8000936:	f024 0c10 	bic.w	ip, r4, #16
 800093a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800093e:	2e01      	cmp	r6, #1
 8000940:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000944:	d812      	bhi.n	800096c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000946:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000948:	2603      	movs	r6, #3
 800094a:	fa06 f60e 	lsl.w	r6, r6, lr
 800094e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000952:	68ce      	ldr	r6, [r1, #12]
 8000954:	fa06 f60e 	lsl.w	r6, r6, lr
 8000958:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800095a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800095c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000962:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000966:	409e      	lsls	r6, r3
 8000968:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800096a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800096e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000970:	fa06 f60e 	lsl.w	r6, r6, lr
 8000974:	43f6      	mvns	r6, r6
 8000976:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097a:	688f      	ldr	r7, [r1, #8]
 800097c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000980:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000984:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000988:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098a:	d116      	bne.n	80009ba <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800098c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000990:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000994:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000998:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009a0:	f04f 0c0f 	mov.w	ip, #15
 80009a4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009a8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009ac:	690f      	ldr	r7, [r1, #16]
 80009ae:	fa07 f70b 	lsl.w	r7, r7, fp
 80009b2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009b6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009ba:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009bc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009be:	f004 0703 	and.w	r7, r4, #3
 80009c2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009c6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009ca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009cc:	00e6      	lsls	r6, r4, #3
 80009ce:	d561      	bpl.n	8000a94 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	f04f 0b00 	mov.w	fp, #0
 80009d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80009d8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009dc:	4e39      	ldr	r6, [pc, #228]	; (8000ac4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009e2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009ea:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009ee:	9703      	str	r7, [sp, #12]
 80009f0:	9f03      	ldr	r7, [sp, #12]
 80009f2:	f023 0703 	bic.w	r7, r3, #3
 80009f6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009fa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009fe:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a02:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a06:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a0a:	f04f 0e0f 	mov.w	lr, #15
 8000a0e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a12:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a18:	d043      	beq.n	8000aa2 <HAL_GPIO_Init+0x192>
 8000a1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a1e:	42b0      	cmp	r0, r6
 8000a20:	d041      	beq.n	8000aa6 <HAL_GPIO_Init+0x196>
 8000a22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a26:	42b0      	cmp	r0, r6
 8000a28:	d03f      	beq.n	8000aaa <HAL_GPIO_Init+0x19a>
 8000a2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a2e:	42b0      	cmp	r0, r6
 8000a30:	d03d      	beq.n	8000aae <HAL_GPIO_Init+0x19e>
 8000a32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a36:	42b0      	cmp	r0, r6
 8000a38:	d03b      	beq.n	8000ab2 <HAL_GPIO_Init+0x1a2>
 8000a3a:	4548      	cmp	r0, r9
 8000a3c:	d03b      	beq.n	8000ab6 <HAL_GPIO_Init+0x1a6>
 8000a3e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000a42:	42b0      	cmp	r0, r6
 8000a44:	d039      	beq.n	8000aba <HAL_GPIO_Init+0x1aa>
 8000a46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a4a:	42b0      	cmp	r0, r6
 8000a4c:	bf14      	ite	ne
 8000a4e:	2608      	movne	r6, #8
 8000a50:	2607      	moveq	r6, #7
 8000a52:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a56:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a5c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a60:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a64:	bf0c      	ite	eq
 8000a66:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a68:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a6a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a6c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a72:	bf0c      	ite	eq
 8000a74:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a76:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a78:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a7c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a80:	bf0c      	ite	eq
 8000a82:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a84:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a86:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a88:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	bf54      	ite	pl
 8000a8e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a90:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a92:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a94:	3301      	adds	r3, #1
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	f47f af45 	bne.w	8000926 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a9c:	b005      	add	sp, #20
 8000a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa2:	465e      	mov	r6, fp
 8000aa4:	e7d5      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	e7d3      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000aaa:	2602      	movs	r6, #2
 8000aac:	e7d1      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000aae:	2603      	movs	r6, #3
 8000ab0:	e7cf      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000ab2:	2604      	movs	r6, #4
 8000ab4:	e7cd      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000ab6:	2605      	movs	r6, #5
 8000ab8:	e7cb      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000aba:	2606      	movs	r6, #6
 8000abc:	e7c9      	b.n	8000a52 <HAL_GPIO_Init+0x142>
 8000abe:	bf00      	nop
 8000ac0:	40013c00 	.word	0x40013c00
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021400 	.word	0x40021400

08000ad0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	b10a      	cbz	r2, 8000ad6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ad2:	6181      	str	r1, [r0, #24]
 8000ad4:	4770      	bx	lr
 8000ad6:	0409      	lsls	r1, r1, #16
 8000ad8:	e7fb      	b.n	8000ad2 <HAL_GPIO_WritePin+0x2>
	...

08000adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	b908      	cbnz	r0, 8000ae8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	e03f      	b.n	8000b68 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae8:	6803      	ldr	r3, [r0, #0]
 8000aea:	07dd      	lsls	r5, r3, #31
 8000aec:	d410      	bmi.n	8000b10 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	0798      	lsls	r0, r3, #30
 8000af2:	d45a      	bmi.n	8000baa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	071a      	lsls	r2, r3, #28
 8000af8:	f100 809c 	bmi.w	8000c34 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	075b      	lsls	r3, r3, #29
 8000b00:	f100 80ba 	bmi.w	8000c78 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b04:	69a0      	ldr	r0, [r4, #24]
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f040 811b 	bne.w	8000d42 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e02b      	b.n	8000b68 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b10:	4ba4      	ldr	r3, [pc, #656]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	f002 020c 	and.w	r2, r2, #12
 8000b18:	2a04      	cmp	r2, #4
 8000b1a:	d007      	beq.n	8000b2c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b22:	2a08      	cmp	r2, #8
 8000b24:	d10a      	bne.n	8000b3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	0259      	lsls	r1, r3, #9
 8000b2a:	d507      	bpl.n	8000b3c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2c:	4b9d      	ldr	r3, [pc, #628]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	039a      	lsls	r2, r3, #14
 8000b32:	d5dc      	bpl.n	8000aee <HAL_RCC_OscConfig+0x12>
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1d9      	bne.n	8000aee <HAL_RCC_OscConfig+0x12>
 8000b3a:	e7d3      	b.n	8000ae4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3c:	6863      	ldr	r3, [r4, #4]
 8000b3e:	4d99      	ldr	r5, [pc, #612]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d113      	bne.n	8000b6e <HAL_RCC_OscConfig+0x92>
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fd0d 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4d94      	ldr	r5, [pc, #592]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	039b      	lsls	r3, r3, #14
 8000b5a:	d4c8      	bmi.n	8000aee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fd06 	bl	800056c <HAL_GetTick>
 8000b60:	1b80      	subs	r0, r0, r6
 8000b62:	2864      	cmp	r0, #100	; 0x64
 8000b64:	d9f7      	bls.n	8000b56 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
}
 8000b68:	b002      	add	sp, #8
 8000b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b72:	d104      	bne.n	8000b7e <HAL_RCC_OscConfig+0xa2>
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7a:	602b      	str	r3, [r5, #0]
 8000b7c:	e7e3      	b.n	8000b46 <HAL_RCC_OscConfig+0x6a>
 8000b7e:	682a      	ldr	r2, [r5, #0]
 8000b80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b84:	602a      	str	r2, [r5, #0]
 8000b86:	682a      	ldr	r2, [r5, #0]
 8000b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b8c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1dd      	bne.n	8000b4e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000b92:	f7ff fceb 	bl	800056c <HAL_GetTick>
 8000b96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	039f      	lsls	r7, r3, #14
 8000b9c:	d5a7      	bpl.n	8000aee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b9e:	f7ff fce5 	bl	800056c <HAL_GetTick>
 8000ba2:	1b80      	subs	r0, r0, r6
 8000ba4:	2864      	cmp	r0, #100	; 0x64
 8000ba6:	d9f7      	bls.n	8000b98 <HAL_RCC_OscConfig+0xbc>
 8000ba8:	e7dd      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000baa:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f012 0f0c 	tst.w	r2, #12
 8000bb2:	d007      	beq.n	8000bc4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bba:	2a08      	cmp	r2, #8
 8000bbc:	d111      	bne.n	8000be2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	025e      	lsls	r6, r3, #9
 8000bc2:	d40e      	bmi.n	8000be2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc4:	4b77      	ldr	r3, [pc, #476]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	0795      	lsls	r5, r2, #30
 8000bca:	d502      	bpl.n	8000bd2 <HAL_RCC_OscConfig+0xf6>
 8000bcc:	68e2      	ldr	r2, [r4, #12]
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	d188      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	6921      	ldr	r1, [r4, #16]
 8000bd6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000bda:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000bde:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be0:	e788      	b.n	8000af4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000be2:	68e2      	ldr	r2, [r4, #12]
 8000be4:	4b70      	ldr	r3, [pc, #448]	; (8000da8 <HAL_RCC_OscConfig+0x2cc>)
 8000be6:	b1b2      	cbz	r2, 8000c16 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bec:	f7ff fcbe 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf0:	4d6c      	ldr	r5, [pc, #432]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000bf2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	0798      	lsls	r0, r3, #30
 8000bf8:	d507      	bpl.n	8000c0a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	6922      	ldr	r2, [r4, #16]
 8000bfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c06:	602b      	str	r3, [r5, #0]
 8000c08:	e774      	b.n	8000af4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fcaf 	bl	800056c <HAL_GetTick>
 8000c0e:	1b80      	subs	r0, r0, r6
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9ef      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x118>
 8000c14:	e7a7      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c18:	f7ff fca8 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1c:	4d61      	ldr	r5, [pc, #388]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	0799      	lsls	r1, r3, #30
 8000c24:	f57f af66 	bpl.w	8000af4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c28:	f7ff fca0 	bl	800056c <HAL_GetTick>
 8000c2c:	1b80      	subs	r0, r0, r6
 8000c2e:	2802      	cmp	r0, #2
 8000c30:	d9f6      	bls.n	8000c20 <HAL_RCC_OscConfig+0x144>
 8000c32:	e798      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c34:	6962      	ldr	r2, [r4, #20]
 8000c36:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <HAL_RCC_OscConfig+0x2d0>)
 8000c38:	b17a      	cbz	r2, 8000c5a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fc95 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c42:	4d58      	ldr	r5, [pc, #352]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c48:	079f      	lsls	r7, r3, #30
 8000c4a:	f53f af57 	bmi.w	8000afc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fc8d 	bl	800056c <HAL_GetTick>
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	2802      	cmp	r0, #2
 8000c56:	d9f6      	bls.n	8000c46 <HAL_RCC_OscConfig+0x16a>
 8000c58:	e785      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000c5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c5c:	f7ff fc86 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c60:	4d50      	ldr	r5, [pc, #320]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c66:	0798      	lsls	r0, r3, #30
 8000c68:	f57f af48 	bpl.w	8000afc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fc7e 	bl	800056c <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2802      	cmp	r0, #2
 8000c74:	d9f6      	bls.n	8000c64 <HAL_RCC_OscConfig+0x188>
 8000c76:	e776      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c78:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c80:	d128      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c96:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c98:	4d45      	ldr	r5, [pc, #276]	; (8000db0 <HAL_RCC_OscConfig+0x2d4>)
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	05d9      	lsls	r1, r3, #23
 8000c9e:	d51b      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	68a3      	ldr	r3, [r4, #8]
 8000ca2:	4d40      	ldr	r5, [pc, #256]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d127      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x21c>
 8000ca8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cb0:	f7ff fc5c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb4:	4d3b      	ldr	r5, [pc, #236]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000cb6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cbe:	079b      	lsls	r3, r3, #30
 8000cc0:	d539      	bpl.n	8000d36 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f43f af1e 	beq.w	8000b04 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cc8:	4a36      	ldr	r2, [pc, #216]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000cca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	e717      	b.n	8000b04 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e7df      	b.n	8000c98 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fc44 	bl	800056c <HAL_GetTick>
 8000ce4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	05da      	lsls	r2, r3, #23
 8000cea:	d4d9      	bmi.n	8000ca0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cec:	f7ff fc3e 	bl	800056c <HAL_GetTick>
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d9f7      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x20a>
 8000cf6:	e736      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d104      	bne.n	8000d06 <HAL_RCC_OscConfig+0x22a>
 8000cfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	672b      	str	r3, [r5, #112]	; 0x70
 8000d04:	e7d0      	b.n	8000ca8 <HAL_RCC_OscConfig+0x1cc>
 8000d06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	672a      	str	r2, [r5, #112]	; 0x70
 8000d0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d10:	f022 0204 	bic.w	r2, r2, #4
 8000d14:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1ca      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fc27 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d22:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d26:	0798      	lsls	r0, r3, #30
 8000d28:	d5cb      	bpl.n	8000cc2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff fc1f 	bl	800056c <HAL_GetTick>
 8000d2e:	1bc0      	subs	r0, r0, r7
 8000d30:	4540      	cmp	r0, r8
 8000d32:	d9f7      	bls.n	8000d24 <HAL_RCC_OscConfig+0x248>
 8000d34:	e717      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f7ff fc19 	bl	800056c <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d9bd      	bls.n	8000cbc <HAL_RCC_OscConfig+0x1e0>
 8000d40:	e711      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d42:	4d18      	ldr	r5, [pc, #96]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
 8000d44:	68ab      	ldr	r3, [r5, #8]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d047      	beq.n	8000dde <HAL_RCC_OscConfig+0x302>
 8000d4e:	4e19      	ldr	r6, [pc, #100]	; (8000db4 <HAL_RCC_OscConfig+0x2d8>)
 8000d50:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d54:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d56:	d135      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d58:	f7ff fc08 	bl	800056c <HAL_GetTick>
 8000d5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	0199      	lsls	r1, r3, #6
 8000d62:	d429      	bmi.n	8000db8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d64:	6a22      	ldr	r2, [r4, #32]
 8000d66:	69e3      	ldr	r3, [r4, #28]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d7a:	0852      	lsrs	r2, r2, #1
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d82:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d84:	2301      	movs	r3, #1
 8000d86:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d88:	f7ff fbf0 	bl	800056c <HAL_GetTick>
 8000d8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	019a      	lsls	r2, r3, #6
 8000d92:	f53f aebb 	bmi.w	8000b0c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fbe9 	bl	800056c <HAL_GetTick>
 8000d9a:	1b40      	subs	r0, r0, r5
 8000d9c:	2802      	cmp	r0, #2
 8000d9e:	d9f6      	bls.n	8000d8e <HAL_RCC_OscConfig+0x2b2>
 8000da0:	e6e1      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	42470000 	.word	0x42470000
 8000dac:	42470e80 	.word	0x42470e80
 8000db0:	40007000 	.word	0x40007000
 8000db4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fbd8 	bl	800056c <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9cd      	bls.n	8000d5e <HAL_RCC_OscConfig+0x282>
 8000dc2:	e6d0      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fbd2 	bl	800056c <HAL_GetTick>
 8000dc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	f57f ae9d 	bpl.w	8000b0c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd2:	f7ff fbcb 	bl	800056c <HAL_GetTick>
 8000dd6:	1b00      	subs	r0, r0, r4
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f6      	bls.n	8000dca <HAL_RCC_OscConfig+0x2ee>
 8000ddc:	e6c3      	b.n	8000b66 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dde:	2801      	cmp	r0, #1
 8000de0:	f43f aec2 	beq.w	8000b68 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000de4:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de6:	69e3      	ldr	r3, [r4, #28]
 8000de8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f47f ae79 	bne.w	8000ae4 <HAL_RCC_OscConfig+0x8>
 8000df2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000df4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	f47f ae73 	bne.w	8000ae4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e04:	4003      	ands	r3, r0
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f47f ae6c 	bne.w	8000ae4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e0e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f47f ae66 	bne.w	8000ae4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000e1a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000e1e:	1ac0      	subs	r0, r0, r3
 8000e20:	bf18      	it	ne
 8000e22:	2001      	movne	r0, #1
 8000e24:	e6a0      	b.n	8000b68 <HAL_RCC_OscConfig+0x8c>
 8000e26:	bf00      	nop

08000e28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e28:	4913      	ldr	r1, [pc, #76]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e2c:	688b      	ldr	r3, [r1, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d003      	beq.n	8000e3e <HAL_RCC_GetSysClockFreq+0x16>
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d003      	beq.n	8000e42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e40:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e42:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e44:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e46:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4c:	bf14      	ite	ne
 8000e4e:	480c      	ldrne	r0, [pc, #48]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e50:	480a      	ldreq	r0, [pc, #40]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e56:	bf18      	it	ne
 8000e58:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e62:	f7ff f9b1 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e6e:	3301      	adds	r3, #1
 8000e70:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e72:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e76:	bd08      	pop	{r3, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	00f42400 	.word	0x00f42400
 8000e80:	007a1200 	.word	0x007a1200

08000e84 <HAL_RCC_ClockConfig>:
{
 8000e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	b910      	cbnz	r0, 8000e94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HAL_RCC_ClockConfig+0x124>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f002 020f 	and.w	r2, r2, #15
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d329      	bcc.n	8000ef4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ea0:	6821      	ldr	r1, [r4, #0]
 8000ea2:	078f      	lsls	r7, r1, #30
 8000ea4:	d42e      	bmi.n	8000f04 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea6:	07c8      	lsls	r0, r1, #31
 8000ea8:	d441      	bmi.n	8000f2e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_ClockConfig+0x124>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f002 020f 	and.w	r2, r2, #15
 8000eb2:	4295      	cmp	r5, r2
 8000eb4:	d367      	bcc.n	8000f86 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb6:	6822      	ldr	r2, [r4, #0]
 8000eb8:	0751      	lsls	r1, r2, #29
 8000eba:	d46d      	bmi.n	8000f98 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ebc:	0713      	lsls	r3, r2, #28
 8000ebe:	d507      	bpl.n	8000ed0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ec0:	4a3a      	ldr	r2, [pc, #232]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
 8000ec2:	6921      	ldr	r1, [r4, #16]
 8000ec4:	6893      	ldr	r3, [r2, #8]
 8000ec6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ece:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ed0:	f7ff ffaa 	bl	8000e28 <HAL_RCC_GetSysClockFreq>
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <HAL_RCC_ClockConfig+0x12c>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	40d8      	lsrs	r0, r3
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <HAL_RCC_ClockConfig+0x130>)
 8000ee4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_RCC_ClockConfig+0x134>)
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f7ff faf5 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef4:	b2ca      	uxtb	r2, r1
 8000ef6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d1c5      	bne.n	8000e8e <HAL_RCC_ClockConfig+0xa>
 8000f02:	e7cd      	b.n	8000ea0 <HAL_RCC_ClockConfig+0x1c>
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f06:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f0a:	bf1e      	ittt	ne
 8000f0c:	689a      	ldrne	r2, [r3, #8]
 8000f0e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f12:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f14:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f16:	bf42      	ittt	mi
 8000f18:	689a      	ldrmi	r2, [r3, #8]
 8000f1a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f1e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	68a0      	ldr	r0, [r4, #8]
 8000f24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f28:	4302      	orrs	r2, r0
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	e7bb      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2e:	6862      	ldr	r2, [r4, #4]
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
 8000f32:	2a01      	cmp	r2, #1
 8000f34:	d11d      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	d0a7      	beq.n	8000e8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3e:	4e1b      	ldr	r6, [pc, #108]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
 8000f40:	68b3      	ldr	r3, [r6, #8]
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f4a:	f7ff fb0f 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f4e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f52:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f54:	68b3      	ldr	r3, [r6, #8]
 8000f56:	6862      	ldr	r2, [r4, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f60:	d0a3      	beq.n	8000eaa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f62:	f7ff fb03 	bl	800056c <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	4540      	cmp	r0, r8
 8000f6a:	d9f3      	bls.n	8000f54 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000f6c:	2003      	movs	r0, #3
}
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f72:	1e91      	subs	r1, r2, #2
 8000f74:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f76:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f78:	d802      	bhi.n	8000f80 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f7e:	e7dd      	b.n	8000f3c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	e7da      	b.n	8000f3c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f86:	b2ea      	uxtb	r2, r5
 8000f88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	429d      	cmp	r5, r3
 8000f92:	f47f af7c 	bne.w	8000e8e <HAL_RCC_ClockConfig+0xa>
 8000f96:	e78e      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <HAL_RCC_ClockConfig+0x128>)
 8000f9a:	68e0      	ldr	r0, [r4, #12]
 8000f9c:	688b      	ldr	r3, [r1, #8]
 8000f9e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fa2:	4303      	orrs	r3, r0
 8000fa4:	608b      	str	r3, [r1, #8]
 8000fa6:	e789      	b.n	8000ebc <HAL_RCC_ClockConfig+0x38>
 8000fa8:	40023c00 	.word	0x40023c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	08004e38 	.word	0x08004e38
 8000fb4:	200005d8 	.word	0x200005d8
 8000fb8:	20000004 	.word	0x20000004

08000fbc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460e      	mov	r6, r1
 8000fc2:	4615      	mov	r5, r2
 8000fc4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fc6:	6821      	ldr	r1, [r4, #0]
 8000fc8:	688a      	ldr	r2, [r1, #8]
 8000fca:	ea36 0302 	bics.w	r3, r6, r2
 8000fce:	d001      	beq.n	8000fd4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000fd0:	2000      	movs	r0, #0
}
 8000fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000fd4:	1c6b      	adds	r3, r5, #1
 8000fd6:	d0f7      	beq.n	8000fc8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000fd8:	f7ff fac8 	bl	800056c <HAL_GetTick>
 8000fdc:	1bc0      	subs	r0, r0, r7
 8000fde:	4285      	cmp	r5, r0
 8000fe0:	d8f1      	bhi.n	8000fc6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000fea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ff2:	d10a      	bne.n	800100a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000ff4:	68a2      	ldr	r2, [r4, #8]
 8000ff6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ffa:	d002      	beq.n	8001002 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ffc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001000:	d103      	bne.n	800100a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001008:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800100a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800100c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001010:	d107      	bne.n	8001022 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001020:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001022:	2301      	movs	r3, #1
 8001024:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001028:	2300      	movs	r3, #0
 800102a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800102e:	2003      	movs	r0, #3
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001034:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001036:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <SPI_EndRxTxTransaction+0x54>)
 800103a:	4e14      	ldr	r6, [pc, #80]	; (800108c <SPI_EndRxTxTransaction+0x58>)
 800103c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800103e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001040:	fbb5 f6f6 	udiv	r6, r5, r6
 8001044:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001048:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800104a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800104e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001050:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001052:	d10d      	bne.n	8001070 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001054:	460a      	mov	r2, r1
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	f7ff ffb0 	bl	8000fbc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800105c:	b910      	cbnz	r0, 8001064 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 800105e:	2000      	movs	r0, #0
}
 8001060:	b002      	add	sp, #8
 8001062:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001064:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800106c:	2003      	movs	r0, #3
 800106e:	e7f7      	b.n	8001060 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001070:	9b01      	ldr	r3, [sp, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f3      	beq.n	800105e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	3b01      	subs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	d4f5      	bmi.n	8001070 <SPI_EndRxTxTransaction+0x3c>
 8001084:	e7eb      	b.n	800105e <SPI_EndRxTxTransaction+0x2a>
 8001086:	bf00      	nop
 8001088:	200005d8 	.word	0x200005d8
 800108c:	016e3600 	.word	0x016e3600

08001090 <HAL_SPI_Init>:
{
 8001090:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001092:	4604      	mov	r4, r0
 8001094:	2800      	cmp	r0, #0
 8001096:	d036      	beq.n	8001106 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800109c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80010a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010a4:	b91b      	cbnz	r3, 80010ae <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80010a6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80010aa:	f001 fab1 	bl	8002610 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80010ae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010b0:	68a0      	ldr	r0, [r4, #8]
 80010b2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80010ba:	680b      	ldr	r3, [r1, #0]
 80010bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010c0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010c2:	6863      	ldr	r3, [r4, #4]
 80010c4:	4303      	orrs	r3, r0
 80010c6:	68e0      	ldr	r0, [r4, #12]
 80010c8:	4303      	orrs	r3, r0
 80010ca:	6920      	ldr	r0, [r4, #16]
 80010cc:	4303      	orrs	r3, r0
 80010ce:	6960      	ldr	r0, [r4, #20]
 80010d0:	4303      	orrs	r3, r0
 80010d2:	69e0      	ldr	r0, [r4, #28]
 80010d4:	4303      	orrs	r3, r0
 80010d6:	6a20      	ldr	r0, [r4, #32]
 80010d8:	4303      	orrs	r3, r0
 80010da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80010dc:	4303      	orrs	r3, r0
 80010de:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80010e2:	4303      	orrs	r3, r0
 80010e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80010e6:	0c12      	lsrs	r2, r2, #16
 80010e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010ea:	f002 0204 	and.w	r2, r2, #4
 80010ee:	431a      	orrs	r2, r3
 80010f0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010f2:	69cb      	ldr	r3, [r1, #28]
 80010f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010f8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010fa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80010fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001100:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001104:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
}
 8001108:	bd10      	pop	{r4, pc}

0800110a <HAL_SPI_Transmit>:
{
 800110a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800110e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001110:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001114:	2b01      	cmp	r3, #1
{
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800111c:	f000 809b 	beq.w	8001256 <HAL_SPI_Transmit+0x14c>
 8001120:	2301      	movs	r3, #1
 8001122:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001126:	f7ff fa21 	bl	800056c <HAL_GetTick>
 800112a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800112c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001130:	b2c0      	uxtb	r0, r0
 8001132:	2801      	cmp	r0, #1
 8001134:	f040 808d 	bne.w	8001252 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8001138:	2d00      	cmp	r5, #0
 800113a:	d05d      	beq.n	80011f8 <HAL_SPI_Transmit+0xee>
 800113c:	f1b8 0f00 	cmp.w	r8, #0
 8001140:	d05a      	beq.n	80011f8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001142:	2303      	movs	r3, #3
 8001144:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001148:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800114a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800114c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800114e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001150:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001154:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001156:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001158:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800115a:	6420      	str	r0, [r4, #64]	; 0x40
 800115c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800115e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001164:	bf08      	it	eq
 8001166:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001168:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800116c:	bf04      	itt	eq
 800116e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001172:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001174:	6803      	ldr	r3, [r0, #0]
 8001176:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001178:	bf5e      	ittt	pl
 800117a:	6803      	ldrpl	r3, [r0, #0]
 800117c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001180:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	d13e      	bne.n	800120a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800118c:	b113      	cbz	r3, 8001194 <HAL_SPI_Transmit+0x8a>
 800118e:	f1b8 0f01 	cmp.w	r8, #1
 8001192:	d107      	bne.n	80011a4 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001194:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001198:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800119a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800119c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80011a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b9a3      	cbnz	r3, 80011d4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80011aa:	463a      	mov	r2, r7
 80011ac:	4631      	mov	r1, r6
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff ff40 	bl	8001034 <SPI_EndRxTxTransaction>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d149      	bne.n	800124c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011b8:	68a3      	ldr	r3, [r4, #8]
 80011ba:	b933      	cbnz	r3, 80011ca <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80011cc:	3000      	adds	r0, #0
 80011ce:	bf18      	it	ne
 80011d0:	2001      	movne	r0, #1
 80011d2:	e011      	b.n	80011f8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	6893      	ldr	r3, [r2, #8]
 80011d8:	0798      	lsls	r0, r3, #30
 80011da:	d505      	bpl.n	80011e8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011de:	f833 1b02 	ldrh.w	r1, [r3], #2
 80011e2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80011e4:	6323      	str	r3, [r4, #48]	; 0x30
 80011e6:	e7d9      	b.n	800119c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011e8:	f7ff f9c0 	bl	800056c <HAL_GetTick>
 80011ec:	1bc0      	subs	r0, r0, r7
 80011ee:	42b0      	cmp	r0, r6
 80011f0:	d3d8      	bcc.n	80011a4 <HAL_SPI_Transmit+0x9a>
 80011f2:	1c71      	adds	r1, r6, #1
 80011f4:	d0d6      	beq.n	80011a4 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80011fe:	2300      	movs	r3, #0
 8001200:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001204:	b002      	add	sp, #8
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800120a:	b113      	cbz	r3, 8001212 <HAL_SPI_Transmit+0x108>
 800120c:	f1b8 0f01 	cmp.w	r8, #1
 8001210:	d108      	bne.n	8001224 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001212:	782b      	ldrb	r3, [r5, #0]
 8001214:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001216:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001218:	3301      	adds	r3, #1
 800121a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800121c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001224:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001226:	b29b      	uxth	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0be      	beq.n	80011aa <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	0792      	lsls	r2, r2, #30
 8001232:	d503      	bpl.n	800123c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001234:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	731a      	strb	r2, [r3, #12]
 800123a:	e7ec      	b.n	8001216 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800123c:	f7ff f996 	bl	800056c <HAL_GetTick>
 8001240:	1bc0      	subs	r0, r0, r7
 8001242:	4286      	cmp	r6, r0
 8001244:	d8ee      	bhi.n	8001224 <HAL_SPI_Transmit+0x11a>
 8001246:	1c73      	adds	r3, r6, #1
 8001248:	d0ec      	beq.n	8001224 <HAL_SPI_Transmit+0x11a>
 800124a:	e7d4      	b.n	80011f6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800124c:	2320      	movs	r3, #32
 800124e:	6563      	str	r3, [r4, #84]	; 0x54
 8001250:	e7b2      	b.n	80011b8 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8001252:	2002      	movs	r0, #2
 8001254:	e7d0      	b.n	80011f8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001256:	2002      	movs	r0, #2
 8001258:	e7d4      	b.n	8001204 <HAL_SPI_Transmit+0xfa>

0800125a <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800125a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800125e:	440b      	add	r3, r1
 8001260:	b2df      	uxtb	r7, r3
 8001262:	1c53      	adds	r3, r2, #1
 8001264:	b2db      	uxtb	r3, r3
  uint8_t color = u8g2->draw_color;
 8001266:	f890 8086 	ldrb.w	r8, [r0, #134]	; 0x86
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	463b      	mov	r3, r7
{
 800126e:	4605      	mov	r5, r0
 8001270:	460c      	mov	r4, r1
 8001272:	4691      	mov	r9, r2
 8001274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001278:	f000 fbee 	bl	8001a58 <u8g2_IsIntersection>
 800127c:	b130      	cbz	r0, 800128c <u8g2_DrawHXBMP+0x32>
 800127e:	2601      	movs	r6, #1
  mask = 1;
  while(len > 0)
  {
    if( u8x8_pgm_read(b) & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001280:	f04f 0b00 	mov.w	fp, #0
  while(len > 0)
 8001284:	42bc      	cmp	r4, r7
 8001286:	d104      	bne.n	8001292 <u8g2_DrawHXBMP+0x38>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
 8001288:	f885 8086 	strb.w	r8, [r5, #134]	; 0x86
}
 800128c:	b003      	add	sp, #12
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( u8x8_pgm_read(b) & mask ) {
 8001292:	f89a 3000 	ldrb.w	r3, [sl]
 8001296:	421e      	tst	r6, r3
 8001298:	d014      	beq.n	80012c4 <u8g2_DrawHXBMP+0x6a>
      u8g2->draw_color = color;
 800129a:	f885 8086 	strb.w	r8, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800129e:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80012a2:	2301      	movs	r3, #1
 80012a4:	464a      	mov	r2, r9
 80012a6:	4621      	mov	r1, r4
 80012a8:	4628      	mov	r0, r5
 80012aa:	f000 fb5e 	bl	800196a <u8g2_DrawHVLine>
    mask <<= 1;
 80012ae:	0076      	lsls	r6, r6, #1
    if ( mask == 0 )
 80012b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    x++;
 80012b4:	f104 0401 	add.w	r4, r4, #1
 80012b8:	b2e4      	uxtb	r4, r4
      b++;
 80012ba:	bf04      	itt	eq
 80012bc:	f10a 0a01 	addeq.w	sl, sl, #1
      mask = 1;
 80012c0:	2601      	moveq	r6, #1
 80012c2:	e7df      	b.n	8001284 <u8g2_DrawHXBMP+0x2a>
    } else if( u8g2->bitmap_transparency == 0 ) {
 80012c4:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d1f0      	bne.n	80012ae <u8g2_DrawHXBMP+0x54>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80012cc:	fab8 f388 	clz	r3, r8
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	f885 3086 	strb.w	r3, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	e7e3      	b.n	80012a2 <u8g2_DrawHXBMP+0x48>

080012da <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80012da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012de:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
{
 80012e2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012e6:	4415      	add	r5, r2
{
 80012e8:	461f      	mov	r7, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012ea:	b2ed      	uxtb	r5, r5
 80012ec:	440b      	add	r3, r1
 80012ee:	9500      	str	r5, [sp, #0]
 80012f0:	b2db      	uxtb	r3, r3
{
 80012f2:	4682      	mov	sl, r0
 80012f4:	4689      	mov	r9, r1
 80012f6:	4614      	mov	r4, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012f8:	f000 fbae 	bl	8001a58 <u8g2_IsIntersection>
 80012fc:	b120      	cbz	r0, 8001308 <u8g2_DrawXBMP+0x2e>
  blen += 7;
 80012fe:	1dfe      	adds	r6, r7, #7
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
    bitmap += blen;
 8001300:	f3c6 06c4 	ubfx	r6, r6, #3, #5
  while( h > 0 )
 8001304:	42ac      	cmp	r4, r5
 8001306:	d102      	bne.n	800130e <u8g2_DrawXBMP+0x34>
    y++;
    h--;
  }
}
 8001308:	b002      	add	sp, #8
 800130a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 800130e:	f8cd 8000 	str.w	r8, [sp]
 8001312:	4622      	mov	r2, r4
 8001314:	463b      	mov	r3, r7
 8001316:	4649      	mov	r1, r9
 8001318:	4650      	mov	r0, sl
    y++;
 800131a:	3401      	adds	r4, #1
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 800131c:	f7ff ff9d 	bl	800125a <u8g2_DrawHXBMP>
    bitmap += blen;
 8001320:	44b0      	add	r8, r6
    y++;
 8001322:	b2e4      	uxtb	r4, r4
 8001324:	e7ee      	b.n	8001304 <u8g2_DrawXBMP+0x2a>

08001326 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001326:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800132a:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 800132c:	f890 903c 	ldrb.w	r9, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 8001330:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001334:	f893 8011 	ldrb.w	r8, [r3, #17]
{
 8001338:	4605      	mov	r5, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800133a:	2600      	movs	r6, #0
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
 8001340:	b2b1      	uxth	r1, r6
  offset *= 8;
 8001342:	00d8      	lsls	r0, r3, #3
 8001344:	fb10 f101 	smulbb	r1, r0, r1
  ptr += offset;
 8001348:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800134a:	b2f4      	uxtb	r4, r6
 800134c:	b289      	uxth	r1, r1
 800134e:	4401      	add	r1, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001350:	193a      	adds	r2, r7, r4
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8001352:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001354:	9100      	str	r1, [sp, #0]
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	2100      	movs	r1, #0
 800135a:	4628      	mov	r0, r5
  } while( src_row < src_max && dest_row < dest_max );
 800135c:	b2e4      	uxtb	r4, r4
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800135e:	f000 fe42 	bl	8001fe6 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8001362:	45a1      	cmp	r9, r4
 8001364:	d904      	bls.n	8001370 <u8g2_send_buffer+0x4a>
 8001366:	3601      	adds	r6, #1
 8001368:	19bb      	adds	r3, r7, r6
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4598      	cmp	r8, r3
 800136e:	d8e5      	bhi.n	800133c <u8g2_send_buffer+0x16>
}
 8001370:	b003      	add	sp, #12
 8001372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001376 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001376:	6803      	ldr	r3, [r0, #0]
 8001378:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= 8;
 800137a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800137e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  cnt *= 8;
 8001380:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001382:	435a      	muls	r2, r3
 8001384:	2100      	movs	r1, #0
 8001386:	f001 ba4d 	b.w	8002824 <memset>

0800138a <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800138a:	b510      	push	{r4, lr}
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 800138c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->tile_curr_row = row;
 800138e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
{
 8001392:	4604      	mov	r4, r0
  u8g2->cb->update_dimension(u8g2);
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800139a:	4620      	mov	r0, r4
 800139c:	685b      	ldr	r3, [r3, #4]
}
 800139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 80013a2:	4718      	bx	r3

080013a4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80013a4:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 80013a6:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
{
 80013aa:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 80013ac:	b10b      	cbz	r3, 80013b2 <u8g2_FirstPage+0xe>
  {
    u8g2_ClearBuffer(u8g2);
 80013ae:	f7ff ffe2 	bl	8001376 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80013b2:	4620      	mov	r0, r4
 80013b4:	2100      	movs	r1, #0
}
 80013b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80013ba:	f7ff bfe6 	b.w	800138a <u8g2_SetBufferCurrTileRow>

080013be <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80013be:	b538      	push	{r3, r4, r5, lr}
 80013c0:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80013c2:	f7ff ffb0 	bl	8001326 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80013c6:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 80013ca:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80013ce:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 80013d0:	440d      	add	r5, r1
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80013d2:	7c5b      	ldrb	r3, [r3, #17]
  row += u8g2->tile_buf_height;
 80013d4:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	d804      	bhi.n	80013e4 <u8g2_NextPage+0x26>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80013da:	4620      	mov	r0, r4
 80013dc:	f000 fe2f 	bl	800203e <u8x8_RefreshDisplay>
    return 0;
 80013e0:	2000      	movs	r0, #0
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if ( u8g2->is_auto_page_clear )
 80013e4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 80013e8:	b113      	cbz	r3, 80013f0 <u8g2_NextPage+0x32>
  {
    u8g2_ClearBuffer(u8g2);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ffc3 	bl	8001376 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7ff ffc9 	bl	800138a <u8g2_SetBufferCurrTileRow>
  return 1;
 80013f8:	2001      	movs	r0, #1
}
 80013fa:	bd38      	pop	{r3, r4, r5, pc}

080013fc <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 8001400:	f7ff ffd0 	bl	80013a4 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff ffda 	bl	80013be <u8g2_NextPage>
 800140a:	4601      	mov	r1, r0
 800140c:	2800      	cmp	r0, #0
 800140e:	d1f9      	bne.n	8001404 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001410:	4620      	mov	r0, r4
}
 8001412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001416:	f7ff bfb8 	b.w	800138a <u8g2_SetBufferCurrTileRow>
	...

0800141c <u8g2_m_32_8_1>:
  return buf;
}
uint8_t *u8g2_m_32_8_1(uint8_t *page_cnt)
{
  static uint8_t buf[256];
  *page_cnt = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	7003      	strb	r3, [r0, #0]
  return buf;
}
 8001420:	4800      	ldr	r0, [pc, #0]	; (8001424 <u8g2_m_32_8_1+0x8>)
 8001422:	4770      	bx	lr
 8001424:	200005f8 	.word	0x200005f8

08001428 <u8g2_Setup_ssd1322_nhd_256x64_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* ssd1322 */
/* ssd1322 1 */
void u8g2_Setup_ssd1322_nhd_256x64_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001428:	b530      	push	{r4, r5, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4909      	ldr	r1, [pc, #36]	; (8001458 <u8g2_Setup_ssd1322_nhd_256x64_1+0x30>)
 8001432:	4613      	mov	r3, r2
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <u8g2_Setup_ssd1322_nhd_256x64_1+0x34>)
{
 8001436:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8001438:	f000 fe2a 	bl	8002090 <u8x8_Setup>
  buf = u8g2_m_32_8_1(&tile_buf_height);
 800143c:	f10d 000f 	add.w	r0, sp, #15
 8001440:	f7ff ffec 	bl	800141c <u8g2_m_32_8_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001444:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001448:	9500      	str	r5, [sp, #0]
 800144a:	4601      	mov	r1, r0
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <u8g2_Setup_ssd1322_nhd_256x64_1+0x38>)
 800144e:	4620      	mov	r0, r4
 8001450:	f000 fbec 	bl	8001c2c <u8g2_SetupBuffer>
}
 8001454:	b005      	add	sp, #20
 8001456:	bd30      	pop	{r4, r5, pc}
 8001458:	08001f1d 	.word	0x08001f1d
 800145c:	08001d79 	.word	0x08001d79
 8001460:	08001a89 	.word	0x08001a89

08001464 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8001464:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 8001466:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8001468:	7850      	ldrb	r0, [r2, #1]
 800146a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 800146e:	b280      	uxth	r0, r0
 8001470:	4770      	bx	lr

08001472 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8001472:	2b01      	cmp	r3, #1
 8001474:	d007      	beq.n	8001486 <u8g2_add_vector_y+0x14>
 8001476:	d303      	bcc.n	8001480 <u8g2_add_vector_y+0xe>
 8001478:	2b02      	cmp	r3, #2
 800147a:	d006      	beq.n	800148a <u8g2_add_vector_y+0x18>
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 800147c:	1a40      	subs	r0, r0, r1
 800147e:	e000      	b.n	8001482 <u8g2_add_vector_y+0x10>
      dy += y;
 8001480:	4410      	add	r0, r2
      dy -= x;
 8001482:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dy;
}
 8001484:	4770      	bx	lr
      dy += x;
 8001486:	4408      	add	r0, r1
 8001488:	e7fb      	b.n	8001482 <u8g2_add_vector_y+0x10>
      dy -= y;
 800148a:	1a80      	subs	r0, r0, r2
 800148c:	e7f9      	b.n	8001482 <u8g2_add_vector_y+0x10>

0800148e <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 800148e:	2b01      	cmp	r3, #1
 8001490:	d007      	beq.n	80014a2 <u8g2_add_vector_x+0x14>
 8001492:	d303      	bcc.n	800149c <u8g2_add_vector_x+0xe>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d006      	beq.n	80014a6 <u8g2_add_vector_x+0x18>
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 8001498:	4410      	add	r0, r2
 800149a:	e000      	b.n	800149e <u8g2_add_vector_x+0x10>
      dx += x;
 800149c:	4408      	add	r0, r1
      dx += y;
 800149e:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dx;
}
 80014a0:	4770      	bx	lr
      dx -= y;
 80014a2:	1a80      	subs	r0, r0, r2
 80014a4:	e7fb      	b.n	800149e <u8g2_add_vector_x+0x10>
      dx -= x;
 80014a6:	1a40      	subs	r0, r0, r1
 80014a8:	e7f9      	b.n	800149e <u8g2_add_vector_x+0x10>

080014aa <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 80014aa:	2000      	movs	r0, #0
 80014ac:	4770      	bx	lr

080014ae <u8g2_read_font_info>:
{
 80014ae:	b538      	push	{r3, r4, r5, lr}
  return u8x8_pgm_read( font );  
 80014b0:	780b      	ldrb	r3, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80014b2:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 80014b4:	784b      	ldrb	r3, [r1, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80014b6:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 80014b8:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80014ba:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 80014bc:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80014be:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 80014c0:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80014c2:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 80014c4:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80014c6:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 80014c8:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80014ca:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 80014cc:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80014ce:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 80014d0:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80014d2:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80014d4:	7a4b      	ldrb	r3, [r1, #9]
 80014d6:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80014d8:	7a8b      	ldrb	r3, [r1, #10]
 80014da:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80014dc:	7acb      	ldrb	r3, [r1, #11]
 80014de:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80014e0:	7b0b      	ldrb	r3, [r1, #12]
 80014e2:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80014e4:	7b4b      	ldrb	r3, [r1, #13]
 80014e6:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80014e8:	7b8b      	ldrb	r3, [r1, #14]
 80014ea:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80014ec:	7bcb      	ldrb	r3, [r1, #15]
 80014ee:	73c3      	strb	r3, [r0, #15]
{
 80014f0:	460d      	mov	r5, r1
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80014f2:	7c0b      	ldrb	r3, [r1, #16]
 80014f4:	7403      	strb	r3, [r0, #16]
{
 80014f6:	4604      	mov	r4, r0
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80014f8:	2111      	movs	r1, #17
 80014fa:	4628      	mov	r0, r5
 80014fc:	f7ff ffb2 	bl	8001464 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001500:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001502:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001504:	4628      	mov	r0, r5
 8001506:	f7ff ffad 	bl	8001464 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800150a:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800150c:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff ffa8 	bl	8001464 <u8g2_font_get_word>
 8001514:	82e0      	strh	r0, [r4, #22]
 8001516:	bd38      	pop	{r3, r4, r5, pc}

08001518 <u8g2_font_decode_get_unsigned_bits>:
{
 8001518:	b570      	push	{r4, r5, r6, lr}
  uint8_t bit_pos = f->decode_bit_pos;
 800151a:	7a84      	ldrb	r4, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 800151c:	6806      	ldr	r6, [r0, #0]
  bit_pos_plus_cnt += cnt;
 800151e:	1862      	adds	r2, r4, r1
  val >>= bit_pos;
 8001520:	7833      	ldrb	r3, [r6, #0]
  bit_pos_plus_cnt += cnt;
 8001522:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001524:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8001526:	fa43 f504 	asr.w	r5, r3, r4
  if ( bit_pos_plus_cnt >= 8 )
 800152a:	d806      	bhi.n	800153a <u8g2_font_decode_get_unsigned_bits+0x22>
  val >>= bit_pos;
 800152c:	b2eb      	uxtb	r3, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 800152e:	7282      	strb	r2, [r0, #10]
  val &= (1U<<cnt)-1;
 8001530:	2001      	movs	r0, #1
 8001532:	4088      	lsls	r0, r1
 8001534:	3801      	subs	r0, #1
}
 8001536:	4018      	ands	r0, r3
 8001538:	bd70      	pop	{r4, r5, r6, pc}
    f->decode_ptr++;
 800153a:	1c73      	adds	r3, r6, #1
 800153c:	6003      	str	r3, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800153e:	7873      	ldrb	r3, [r6, #1]
    s -= bit_pos;
 8001540:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001544:	b2e4      	uxtb	r4, r4
 8001546:	40a3      	lsls	r3, r4
 8001548:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 800154a:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800154c:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	e7ed      	b.n	800152e <u8g2_font_decode_get_unsigned_bits+0x16>

08001552 <u8g2_font_setup_decode>:
{
 8001552:	b538      	push	{r3, r4, r5, lr}
  decode->decode_bit_pos = 0;
 8001554:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001556:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800155a:	4604      	mov	r4, r0
  decode->decode_bit_pos = 0;
 800155c:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
  decode->decode_ptr = glyph_data;
 8001560:	6581      	str	r1, [r0, #88]	; 0x58
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001562:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff ffd6 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800156c:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001570:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001574:	4628      	mov	r0, r5
 8001576:	f7ff ffcf 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 800157a:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 800157e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001588:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800158c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 8001590:	bd38      	pop	{r3, r4, r5, pc}

08001592 <u8g2_font_decode_get_signed_bits>:
{
 8001592:	b510      	push	{r4, lr}
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001594:	f7ff ffc0 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
  cnt--;
 8001598:	1e4c      	subs	r4, r1, #1
  d <<= cnt;
 800159a:	b2e4      	uxtb	r4, r4
 800159c:	2301      	movs	r3, #1
 800159e:	40a3      	lsls	r3, r4
  v -= d;
 80015a0:	1ac0      	subs	r0, r0, r3
}
 80015a2:	b240      	sxtb	r0, r0
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <u8g2_font_decode_len>:
{
 80015a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015aa:	b087      	sub	sp, #28
  lx = decode->x;
 80015ac:	f890 805e 	ldrb.w	r8, [r0, #94]	; 0x5e
  ly = decode->y;
 80015b0:	f890 705f 	ldrb.w	r7, [r0, #95]	; 0x5f
{
 80015b4:	9205      	str	r2, [sp, #20]
 80015b6:	4604      	mov	r4, r0
 80015b8:	460e      	mov	r6, r1
    rem = decode->glyph_width;
 80015ba:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80015be:	f894 9066 	ldrb.w	r9, [r4, #102]	; 0x66
 80015c2:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    rem -= lx;
 80015c6:	eba5 0508 	sub.w	r5, r5, r8
 80015ca:	b2ed      	uxtb	r5, r5
 80015cc:	42ae      	cmp	r6, r5
 80015ce:	4633      	mov	r3, r6
 80015d0:	bf28      	it	cs
 80015d2:	462b      	movcs	r3, r5
 80015d4:	9302      	str	r3, [sp, #8]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80015d6:	fa4f fa88 	sxtb.w	sl, r8
    y = decode->target_y;
 80015da:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80015de:	9304      	str	r3, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80015e0:	fa4f fb87 	sxtb.w	fp, r7
 80015e4:	464b      	mov	r3, r9
 80015e6:	465a      	mov	r2, fp
 80015e8:	4651      	mov	r1, sl
 80015ea:	f7ff ff50 	bl	800148e <u8g2_add_vector_x>
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80015ee:	464b      	mov	r3, r9
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80015f0:	9003      	str	r0, [sp, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80015f2:	465a      	mov	r2, fp
 80015f4:	4651      	mov	r1, sl
 80015f6:	9804      	ldr	r0, [sp, #16]
 80015f8:	f7ff ff3b 	bl	8001472 <u8g2_add_vector_y>
    if ( is_foreground )
 80015fc:	9b05      	ldr	r3, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80015fe:	4602      	mov	r2, r0
    if ( is_foreground )
 8001600:	b19b      	cbz	r3, 800162a <u8g2_font_decode_len+0x84>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001602:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001606:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800160a:	f8cd 9000 	str.w	r9, [sp]
 800160e:	9b02      	ldr	r3, [sp, #8]
 8001610:	9903      	ldr	r1, [sp, #12]
 8001612:	4620      	mov	r0, r4
 8001614:	f000 f9a9 	bl	800196a <u8g2_DrawHVLine>
    if ( cnt < rem )
 8001618:	42ae      	cmp	r6, r5
 800161a:	d30d      	bcc.n	8001638 <u8g2_font_decode_len+0x92>
    cnt -= rem;
 800161c:	1b76      	subs	r6, r6, r5
    ly++;
 800161e:	3701      	adds	r7, #1
    cnt -= rem;
 8001620:	b2f6      	uxtb	r6, r6
    ly++;
 8001622:	b2ff      	uxtb	r7, r7
    lx = 0;
 8001624:	f04f 0800 	mov.w	r8, #0
    rem = decode->glyph_width;
 8001628:	e7c7      	b.n	80015ba <u8g2_font_decode_len+0x14>
    else if ( decode->is_transparent == 0 )    
 800162a:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f2      	bne.n	8001618 <u8g2_font_decode_len+0x72>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001632:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 8001636:	e7e6      	b.n	8001606 <u8g2_font_decode_len+0x60>
  lx += cnt;
 8001638:	4446      	add	r6, r8
  decode->x = lx;
 800163a:	f884 605e 	strb.w	r6, [r4, #94]	; 0x5e
  decode->y = ly;
 800163e:	f884 b05f 	strb.w	fp, [r4, #95]	; 0x5f
}
 8001642:	b007      	add	sp, #28
 8001644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001648 <u8g2_font_decode_glyph>:
{
 8001648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800164c:	4604      	mov	r4, r0
 800164e:	b085      	sub	sp, #20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001650:	f100 0958 	add.w	r9, r0, #88	; 0x58
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001654:	f7ff ff7d 	bl	8001552 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001658:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800165c:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
  h = u8g2->font_decode.glyph_height;
 8001660:	9302      	str	r3, [sp, #8]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001662:	4648      	mov	r0, r9
 8001664:	f7ff ff95 	bl	8001592 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001668:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800166c:	4683      	mov	fp, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800166e:	4648      	mov	r0, r9
 8001670:	f7ff ff8f 	bl	8001592 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001674:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001678:	4680      	mov	r8, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800167a:	4648      	mov	r0, r9
 800167c:	f7ff ff89 	bl	8001592 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8001680:	f994 6060 	ldrsb.w	r6, [r4, #96]	; 0x60
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001684:	9003      	str	r0, [sp, #12]
  if ( decode->glyph_width > 0 )
 8001686:	2e00      	cmp	r6, #0
 8001688:	dd57      	ble.n	800173a <u8g2_font_decode_glyph+0xf2>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800168a:	f89d 5008 	ldrb.w	r5, [sp, #8]
 800168e:	f894 a066 	ldrb.w	sl, [r4, #102]	; 0x66
 8001692:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8001696:	44a8      	add	r8, r5
 8001698:	f1c8 0800 	rsb	r8, r8, #0
 800169c:	fa4f f888 	sxtb.w	r8, r8
 80016a0:	4653      	mov	r3, sl
 80016a2:	4642      	mov	r2, r8
 80016a4:	4659      	mov	r1, fp
 80016a6:	f7ff fef2 	bl	800148e <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80016aa:	4653      	mov	r3, sl
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80016ac:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 80016b0:	4607      	mov	r7, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80016b2:	4642      	mov	r2, r8
 80016b4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80016b8:	4659      	mov	r1, fp
 80016ba:	f7ff feda 	bl	8001472 <u8g2_add_vector_y>
 80016be:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      switch(decode->dir)
 80016c2:	f1ba 0f03 	cmp.w	sl, #3
 80016c6:	d85a      	bhi.n	800177e <u8g2_font_decode_glyph+0x136>
 80016c8:	e8df f00a 	tbb	[pc, sl]
 80016cc:	50443b02 	.word	0x50443b02
	    x1 += decode->glyph_width;
 80016d0:	19bb      	adds	r3, r7, r6
	    y1 += h;
 80016d2:	4405      	add	r5, r0
	    x1 += decode->glyph_width;
 80016d4:	b2db      	uxtb	r3, r3
	    y1 += h;
 80016d6:	b2e9      	uxtb	r1, r5
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80016d8:	9100      	str	r1, [sp, #0]
 80016da:	4602      	mov	r2, r0
 80016dc:	4639      	mov	r1, r7
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 f9ba 	bl	8001a58 <u8g2_IsIntersection>
 80016e4:	b348      	cbz	r0, 800173a <u8g2_font_decode_glyph+0xf2>
    decode->x = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    decode->y = 0;
 80016ec:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80016f0:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 80016f4:	4648      	mov	r0, r9
 80016f6:	f7ff ff0f 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80016fa:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80016fe:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001700:	4648      	mov	r0, r9
 8001702:	f7ff ff09 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
 8001706:	4605      	mov	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	4631      	mov	r1, r6
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff4a 	bl	80015a6 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001712:	4629      	mov	r1, r5
 8001714:	4620      	mov	r0, r4
 8001716:	2201      	movs	r2, #1
 8001718:	f7ff ff45 	bl	80015a6 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800171c:	2101      	movs	r1, #1
 800171e:	4648      	mov	r0, r9
 8001720:	f7ff fefa 	bl	8001518 <u8g2_font_decode_get_unsigned_bits>
 8001724:	2800      	cmp	r0, #0
 8001726:	d1ef      	bne.n	8001708 <u8g2_font_decode_glyph+0xc0>
      if ( decode->y >= h )
 8001728:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
 800172c:	9a02      	ldr	r2, [sp, #8]
 800172e:	4293      	cmp	r3, r2
 8001730:	dbde      	blt.n	80016f0 <u8g2_font_decode_glyph+0xa8>
    u8g2->draw_color = decode->fg_color;
 8001732:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8001736:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
}
 800173a:	9803      	ldr	r0, [sp, #12]
 800173c:	b005      	add	sp, #20
 800173e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001742:	f1c5 0501 	rsb	r5, r5, #1
 8001746:	197a      	adds	r2, r7, r5
	    y1 += decode->glyph_width;
 8001748:	4406      	add	r6, r0
	    x1++;
 800174a:	3701      	adds	r7, #1
 800174c:	b2fb      	uxtb	r3, r7
	    y1 += decode->glyph_width;
 800174e:	b2f1      	uxtb	r1, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001750:	b2d7      	uxtb	r7, r2
	    break;	  
 8001752:	e7c1      	b.n	80016d8 <u8g2_font_decode_glyph+0x90>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001754:	f1c6 0601 	rsb	r6, r6, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001758:	f1c5 0501 	rsb	r5, r5, #1
	    y1++;
 800175c:	1c41      	adds	r1, r0, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800175e:	19ba      	adds	r2, r7, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001760:	4405      	add	r5, r0
	    x1++;
 8001762:	3701      	adds	r7, #1
 8001764:	b2fb      	uxtb	r3, r7
	    y1++;
 8001766:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001768:	b2e8      	uxtb	r0, r5
 800176a:	e7f1      	b.n	8001750 <u8g2_font_decode_glyph+0x108>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800176c:	f1c6 0601 	rsb	r6, r6, #1
	    y1++;
 8001770:	1c41      	adds	r1, r0, #1
	    x1 += h;
 8001772:	19eb      	adds	r3, r5, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001774:	4406      	add	r6, r0
	    x1 += h;
 8001776:	b2db      	uxtb	r3, r3
	    y1++;
 8001778:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800177a:	b2f0      	uxtb	r0, r6
	    break;	  
 800177c:	e7ac      	b.n	80016d8 <u8g2_font_decode_glyph+0x90>
      y1 = y0;
 800177e:	4601      	mov	r1, r0
      x1 = x0;
 8001780:	463b      	mov	r3, r7
 8001782:	e7a9      	b.n	80016d8 <u8g2_font_decode_glyph+0x90>

08001784 <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 8001784:	6d03      	ldr	r3, [r0, #80]	; 0x50
  if ( encoding <= 255 )
 8001786:	29ff      	cmp	r1, #255	; 0xff
{
 8001788:	b570      	push	{r4, r5, r6, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800178a:	f103 0317 	add.w	r3, r3, #23
{
 800178e:	460d      	mov	r5, r1
  if ( encoding <= 255 )
 8001790:	d812      	bhi.n	80017b8 <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 8001792:	2960      	cmp	r1, #96	; 0x60
 8001794:	d909      	bls.n	80017aa <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 8001796:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
      font += u8g2->font_info.start_pos_upper_A;
 800179a:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800179c:	7858      	ldrb	r0, [r3, #1]
 800179e:	b348      	cbz	r0, 80017f4 <u8g2_font_get_glyph_data+0x70>
      if ( u8x8_pgm_read( font ) == encoding )
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	42aa      	cmp	r2, r5
 80017a4:	d106      	bne.n	80017b4 <u8g2_font_get_glyph_data+0x30>
	return font+2;	/* skip encoding and glyph size */
 80017a6:	1c98      	adds	r0, r3, #2
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
    else if ( encoding >= 'A' )
 80017aa:	2940      	cmp	r1, #64	; 0x40
 80017ac:	d9f6      	bls.n	800179c <u8g2_font_get_glyph_data+0x18>
      font += u8g2->font_info.start_pos_upper_A;
 80017ae:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 80017b2:	e7f2      	b.n	800179a <u8g2_font_get_glyph_data+0x16>
      font += u8x8_pgm_read( font + 1 );
 80017b4:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80017b6:	e7f1      	b.n	800179c <u8g2_font_get_glyph_data+0x18>
    font += u8g2->font_info.start_pos_unicode;
 80017b8:	f8b0 407e 	ldrh.w	r4, [r0, #126]	; 0x7e
 80017bc:	441c      	add	r4, r3
    unicode_lookup_table = font; 
 80017be:	4626      	mov	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4630      	mov	r0, r6
 80017c4:	f7ff fe4e 	bl	8001464 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80017c8:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80017ca:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80017cc:	4630      	mov	r0, r6
 80017ce:	f7ff fe49 	bl	8001464 <u8g2_font_get_word>
    } while( e < encoding );
 80017d2:	4285      	cmp	r5, r0
      unicode_lookup_table+=4;
 80017d4:	f106 0604 	add.w	r6, r6, #4
    } while( e < encoding );
 80017d8:	d8f2      	bhi.n	80017c0 <u8g2_font_get_glyph_data+0x3c>
      e = u8x8_pgm_read( font );
 80017da:	7823      	ldrb	r3, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 80017dc:	7860      	ldrb	r0, [r4, #1]
      if ( e == 0 )
 80017de:	ea50 2303 	orrs.w	r3, r0, r3, lsl #8
 80017e2:	d006      	beq.n	80017f2 <u8g2_font_get_glyph_data+0x6e>
      if ( e == encoding )
 80017e4:	429d      	cmp	r5, r3
 80017e6:	d101      	bne.n	80017ec <u8g2_font_get_glyph_data+0x68>
	return font+3;	/* skip encoding and glyph size */
 80017e8:	1ce0      	adds	r0, r4, #3
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
      font += u8x8_pgm_read( font + 2 );
 80017ec:	78a3      	ldrb	r3, [r4, #2]
 80017ee:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
 80017f0:	e7f3      	b.n	80017da <u8g2_font_get_glyph_data+0x56>
  return NULL;
 80017f2:	4618      	mov	r0, r3
}
 80017f4:	bd70      	pop	{r4, r5, r6, pc}

080017f6 <u8g2_DrawGlyph>:
{
 80017f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f8:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
 80017fa:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
{
 80017fe:	4604      	mov	r4, r0
 8001800:	460e      	mov	r6, r1
 8001802:	4615      	mov	r5, r2
  switch(u8g2->font_decode.dir)
 8001804:	2b03      	cmp	r3, #3
 8001806:	d807      	bhi.n	8001818 <u8g2_DrawGlyph+0x22>
 8001808:	e8df f003 	tbb	[pc, r3]
 800180c:	1e1a1502 	.word	0x1e1a1502
      y += u8g2->font_calc_vref(u8g2);
 8001810:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001812:	4798      	blx	r3
 8001814:	4405      	add	r5, r0
      y -= u8g2->font_calc_vref(u8g2);
 8001816:	b2ed      	uxtb	r5, r5
  u8g2->font_decode.target_x = x;
 8001818:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800181c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001820:	4639      	mov	r1, r7
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ffae 	bl	8001784 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8001828:	b120      	cbz	r0, 8001834 <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800182a:	4601      	mov	r1, r0
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ff0b 	bl	8001648 <u8g2_font_decode_glyph>
 8001832:	b2c0      	uxtb	r0, r0
}
 8001834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 8001836:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001838:	4798      	blx	r3
 800183a:	1a36      	subs	r6, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 800183c:	b2f6      	uxtb	r6, r6
      break;
 800183e:	e7eb      	b.n	8001818 <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 8001840:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001842:	4798      	blx	r3
 8001844:	1a2d      	subs	r5, r5, r0
 8001846:	e7e6      	b.n	8001816 <u8g2_DrawGlyph+0x20>
      x += u8g2->font_calc_vref(u8g2);
 8001848:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800184a:	4798      	blx	r3
 800184c:	4406      	add	r6, r0
 800184e:	e7f5      	b.n	800183c <u8g2_DrawGlyph+0x46>

08001850 <u8g2_draw_string>:
{
 8001850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001854:	461e      	mov	r6, r3
 8001856:	4607      	mov	r7, r0
 8001858:	460c      	mov	r4, r1
 800185a:	4615      	mov	r5, r2
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800185c:	f000 fa0e 	bl	8001c7c <u8x8_utf8_init>
 8001860:	3e01      	subs	r6, #1
  sum = 0;
 8001862:	f04f 0a00 	mov.w	sl, #0
    if ( e == 0x0ffff )
 8001866:	f64f 78ff 	movw	r8, #65535	; 0xffff
    if ( e != 0x0fffe )
 800186a:	f64f 79fe 	movw	r9, #65534	; 0xfffe
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001874:	4638      	mov	r0, r7
 8001876:	4798      	blx	r3
    if ( e == 0x0ffff )
 8001878:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800187a:	4603      	mov	r3, r0
    if ( e == 0x0ffff )
 800187c:	d01b      	beq.n	80018b6 <u8g2_draw_string+0x66>
    if ( e != 0x0fffe )
 800187e:	4548      	cmp	r0, r9
 8001880:	d0f5      	beq.n	800186e <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001882:	462a      	mov	r2, r5
 8001884:	4621      	mov	r1, r4
 8001886:	4638      	mov	r0, r7
 8001888:	f7ff ffb5 	bl	80017f6 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 800188c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001890:	2b03      	cmp	r3, #3
 8001892:	d805      	bhi.n	80018a0 <u8g2_draw_string+0x50>
 8001894:	e8df f003 	tbb	[pc, r3]
 8001898:	0d0b0802 	.word	0x0d0b0802
	  x += delta;
 800189c:	4404      	add	r4, r0
	  x -= delta;
 800189e:	b2e4      	uxtb	r4, r4
      sum += delta;    
 80018a0:	4450      	add	r0, sl
 80018a2:	fa5f fa80 	uxtb.w	sl, r0
 80018a6:	e7e2      	b.n	800186e <u8g2_draw_string+0x1e>
	  y += delta;
 80018a8:	4405      	add	r5, r0
	  y -= delta;
 80018aa:	b2ed      	uxtb	r5, r5
	  break;
 80018ac:	e7f8      	b.n	80018a0 <u8g2_draw_string+0x50>
	  x -= delta;
 80018ae:	1a24      	subs	r4, r4, r0
 80018b0:	e7f5      	b.n	800189e <u8g2_draw_string+0x4e>
	  y -= delta;
 80018b2:	1a2d      	subs	r5, r5, r0
 80018b4:	e7f9      	b.n	80018aa <u8g2_draw_string+0x5a>
}
 80018b6:	4650      	mov	r0, sl
 80018b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080018bc <u8g2_DrawStr>:
{
 80018bc:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80018be:	4c03      	ldr	r4, [pc, #12]	; (80018cc <u8g2_DrawStr+0x10>)
 80018c0:	6044      	str	r4, [r0, #4]
}
 80018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8g2_draw_string(u8g2, x, y, str);
 80018c6:	f7ff bfc3 	b.w	8001850 <u8g2_draw_string>
 80018ca:	bf00      	nop
 80018cc:	08001c6d 	.word	0x08001c6d

080018d0 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 80018d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 80018d2:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 80018d4:	b333      	cbz	r3, 8001924 <u8g2_UpdateRefHeight+0x54>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80018d6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80018da:	f990 4075 	ldrsb.w	r4, [r0, #117]	; 0x75
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80018de:	f990 1076 	ldrsb.w	r1, [r0, #118]	; 0x76
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80018e2:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80018e6:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80018ea:	b1db      	cbz	r3, 8001924 <u8g2_UpdateRefHeight+0x54>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10c      	bne.n	800190a <u8g2_UpdateRefHeight+0x3a>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80018f0:	f990 3077 	ldrsb.w	r3, [r0, #119]	; 0x77
 80018f4:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80018f6:	bfb8      	it	lt
 80018f8:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80018fc:	f990 3078 	ldrsb.w	r3, [r0, #120]	; 0x78
 8001900:	4299      	cmp	r1, r3
 8001902:	dd0f      	ble.n	8001924 <u8g2_UpdateRefHeight+0x54>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001904:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8001908:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800190a:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
 800190e:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
 8001912:	4413      	add	r3, r2
 8001914:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001916:	bfb8      	it	lt
 8001918:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800191c:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800191e:	bfc8      	it	gt
 8001920:	f880 2083 	strbgt.w	r2, [r0, #131]	; 0x83
 8001924:	bd10      	pop	{r4, pc}
	...

08001928 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <u8g2_SetFontPosBaseline+0x8>)
 800192a:	6543      	str	r3, [r0, #84]	; 0x54
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	080014ab 	.word	0x080014ab

08001934 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8001934:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001936:	428a      	cmp	r2, r1
{
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 800193c:	d008      	beq.n	8001950 <u8g2_SetFont+0x1c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800193e:	6521      	str	r1, [r4, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001940:	3068      	adds	r0, #104	; 0x68
 8001942:	f7ff fdb4 	bl	80014ae <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001946:	4620      	mov	r0, r4
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 800194c:	f7ff bfc0 	b.w	80018d0 <u8g2_UpdateRefHeight>
 8001950:	bd10      	pop	{r4, pc}

08001952 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001952:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001954:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
{
 8001958:	f89d 600c 	ldrb.w	r6, [sp, #12]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800195c:	9603      	str	r6, [sp, #12]
  y -= u8g2->pixel_curr_row;
 800195e:	1b12      	subs	r2, r2, r4
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001960:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	46a4      	mov	ip, r4
}
 8001966:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001968:	4760      	bx	ip

0800196a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800196a:	b470      	push	{r4, r5, r6}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800196c:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
{
 8001970:	f89d 500c 	ldrb.w	r5, [sp, #12]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001974:	2c00      	cmp	r4, #0
 8001976:	d03a      	beq.n	80019ee <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001978:	2b00      	cmp	r3, #0
 800197a:	d038      	beq.n	80019ee <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800197c:	2b01      	cmp	r3, #1
 800197e:	d904      	bls.n	800198a <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 8001980:	2d02      	cmp	r5, #2
 8001982:	d12b      	bne.n	80019dc <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 8001984:	3101      	adds	r1, #1
 8001986:	1ac9      	subs	r1, r1, r3
 8001988:	b2c9      	uxtb	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 800198a:	f015 0501 	ands.w	r5, r5, #1
 800198e:	d130      	bne.n	80019f2 <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 8001990:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 8001994:	4294      	cmp	r4, r2
 8001996:	d82a      	bhi.n	80019ee <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 8001998:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 800199c:	4294      	cmp	r4, r2
 800199e:	d926      	bls.n	80019ee <u8g2_DrawHVLine+0x84>
  b += *len;
 80019a0:	440b      	add	r3, r1
 80019a2:	b2db      	uxtb	r3, r3
  if ( a > b )
 80019a4:	428b      	cmp	r3, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80019a6:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 80019aa:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
  if ( a > b )
 80019ae:	d21c      	bcs.n	80019ea <u8g2_DrawHVLine+0x80>
    if ( a < d )
 80019b0:	428c      	cmp	r4, r1
 80019b2:	d919      	bls.n	80019e8 <u8g2_DrawHVLine+0x7e>
      b--;
 80019b4:	1e63      	subs	r3, r4, #1
 80019b6:	b2db      	uxtb	r3, r3
  if ( b <= c )
 80019b8:	429e      	cmp	r6, r3
 80019ba:	d218      	bcs.n	80019ee <u8g2_DrawHVLine+0x84>
 80019bc:	42b1      	cmp	r1, r6
 80019be:	bf38      	it	cc
 80019c0:	4631      	movcc	r1, r6
  b -= a;
 80019c2:	429c      	cmp	r4, r3
 80019c4:	bf94      	ite	ls
 80019c6:	ebc1 0404 	rsbls	r4, r1, r4
 80019ca:	ebc1 0403 	rsbhi	r4, r1, r3
 80019ce:	b2e3      	uxtb	r3, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80019d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80019d2:	9503      	str	r5, [sp, #12]
 80019d4:	68a4      	ldr	r4, [r4, #8]
 80019d6:	46a4      	mov	ip, r4
    }
}
 80019d8:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80019da:	4760      	bx	ip
	else if ( dir == 3 )
 80019dc:	2d03      	cmp	r5, #3
	  y++;
 80019de:	bf02      	ittt	eq
 80019e0:	3201      	addeq	r2, #1
 80019e2:	1ad2      	subeq	r2, r2, r3
 80019e4:	b2d2      	uxtbeq	r2, r2
 80019e6:	e7d0      	b.n	800198a <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80019e8:	4631      	mov	r1, r6
  if ( a >= d )
 80019ea:	428c      	cmp	r4, r1
 80019ec:	d8e4      	bhi.n	80019b8 <u8g2_DrawHVLine+0x4e>
}
 80019ee:	bc70      	pop	{r4, r5, r6}
 80019f0:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 80019f2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80019f6:	428c      	cmp	r4, r1
 80019f8:	d8f9      	bhi.n	80019ee <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 80019fa:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 80019fe:	428c      	cmp	r4, r1
 8001a00:	d9f5      	bls.n	80019ee <u8g2_DrawHVLine+0x84>
  b += *len;
 8001a02:	4413      	add	r3, r2
 8001a04:	b2db      	uxtb	r3, r3
  if ( a > b )
 8001a06:	4293      	cmp	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001a08:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 8001a0c:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
  if ( a > b )
 8001a10:	d210      	bcs.n	8001a34 <u8g2_DrawHVLine+0xca>
    if ( a < d )
 8001a12:	4294      	cmp	r4, r2
 8001a14:	d90d      	bls.n	8001a32 <u8g2_DrawHVLine+0xc8>
      b--;
 8001a16:	1e63      	subs	r3, r4, #1
 8001a18:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8001a1a:	429e      	cmp	r6, r3
 8001a1c:	d2e7      	bcs.n	80019ee <u8g2_DrawHVLine+0x84>
 8001a1e:	42b2      	cmp	r2, r6
 8001a20:	bf38      	it	cc
 8001a22:	4632      	movcc	r2, r6
  b -= a;
 8001a24:	429c      	cmp	r4, r3
 8001a26:	bf94      	ite	ls
 8001a28:	ebc2 0404 	rsbls	r4, r2, r4
 8001a2c:	ebc2 0403 	rsbhi	r4, r2, r3
 8001a30:	e7cd      	b.n	80019ce <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001a32:	4632      	mov	r2, r6
  if ( a >= d )
 8001a34:	4294      	cmp	r4, r2
 8001a36:	d9da      	bls.n	80019ee <u8g2_DrawHVLine+0x84>
 8001a38:	e7ef      	b.n	8001a1a <u8g2_DrawHVLine+0xb0>

08001a3a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 8001a3a:	428a      	cmp	r2, r1
 8001a3c:	d206      	bcs.n	8001a4c <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001a3e:	4283      	cmp	r3, r0
 8001a40:	d808      	bhi.n	8001a54 <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
 8001a42:	429a      	cmp	r2, r3
 8001a44:	bf94      	ite	ls
 8001a46:	2000      	movls	r0, #0
 8001a48:	2001      	movhi	r0, #1
 8001a4a:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001a4c:	4283      	cmp	r3, r0
 8001a4e:	d8f8      	bhi.n	8001a42 <u8g2_is_intersection_decision_tree+0x8>
	return 0;
      }
    }
    else
    {
      return 0;
 8001a50:	2000      	movs	r0, #0
 8001a52:	4770      	bx	lr
      return 1;
 8001a54:	2001      	movs	r0, #1
    }
  }
}
 8001a56:	4770      	bx	lr

08001a58 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001a60:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8001a64:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001a68:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 8001a6c:	f7ff ffe5 	bl	8001a3a <u8g2_is_intersection_decision_tree>
 8001a70:	b148      	cbz	r0, 8001a86 <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001a72:	4633      	mov	r3, r6
 8001a74:	462a      	mov	r2, r5
 8001a76:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8001a7a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
}
 8001a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001a82:	f7ff bfda 	b.w	8001a3a <u8g2_is_intersection_decision_tree>
}
 8001a86:	bd70      	pop	{r4, r5, r6, pc}

08001a88 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8001a8a:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
{
 8001a8e:	f89d 7014 	ldrb.w	r7, [sp, #20]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001a92:	f002 0607 	and.w	r6, r2, #7
  mask <<= bit_pos;
 8001a96:	2401      	movs	r4, #1
 8001a98:	40b4      	lsls	r4, r6
  if ( u8g2->draw_color <= 1 )
 8001a9a:	2d01      	cmp	r5, #1
  mask <<= bit_pos;
 8001a9c:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 8001a9e:	d817      	bhi.n	8001ad0 <u8g2_ll_hvline_vertical_top_lsb+0x48>
    or_mask  = mask;
 8001aa0:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 8001aa2:	d017      	beq.n	8001ad4 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8001aa4:	f002 0ef8 	and.w	lr, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001aa8:	6802      	ldr	r2, [r0, #0]
 8001aaa:	f892 c010 	ldrb.w	ip, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8001aae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001ab0:	fb0c 110e 	mla	r1, ip, lr, r1
 8001ab4:	4411      	add	r1, r2
  
  if ( dir == 0 )
 8001ab6:	b97f      	cbnz	r7, 8001ad8 <u8g2_ll_hvline_vertical_top_lsb+0x50>
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	440b      	add	r3, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001ac0:	780a      	ldrb	r2, [r1, #0]
 8001ac2:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8001ac4:	4062      	eors	r2, r4
 8001ac6:	f801 2b01 	strb.w	r2, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
 8001aca:	4299      	cmp	r1, r3
 8001acc:	d1f8      	bne.n	8001ac0 <u8g2_ll_hvline_vertical_top_lsb+0x38>
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	e7e7      	b.n	8001aa4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  xor_mask = 0;
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	e7e5      	b.n	8001aa4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
 8001ad8:	780a      	ldrb	r2, [r1, #0]
      *ptr ^= xor_mask;
      
      bit_pos++;
 8001ada:	3601      	adds	r6, #1
      *ptr |= or_mask;
 8001adc:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8001ade:	4062      	eors	r2, r4
      bit_pos &= 7;

      len--;
 8001ae0:	3b01      	subs	r3, #1

      if ( bit_pos == 0 )
 8001ae2:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
 8001ae6:	700a      	strb	r2, [r1, #0]
      len--;
 8001ae8:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 8001aea:	d10c      	bne.n	8001b06 <u8g2_ll_hvline_vertical_top_lsb+0x7e>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001aec:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001af0:	4411      	add	r1, r2
		
	if ( u8g2->draw_color <= 1 )
 8001af2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 8001af6:	2a01      	cmp	r2, #1
 8001af8:	d80a      	bhi.n	8001b10 <u8g2_ll_hvline_vertical_top_lsb+0x88>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
 8001afa:	d00b      	beq.n	8001b14 <u8g2_ll_hvline_vertical_top_lsb+0x8c>
	  xor_mask = 1;
 8001afc:	2401      	movs	r4, #1
	  or_mask  = 1;
 8001afe:	4625      	mov	r5, r4
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e9      	bne.n	8001ad8 <u8g2_ll_hvline_vertical_top_lsb+0x50>
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	or_mask <<= 1;
 8001b06:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 8001b08:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8001b0a:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8001b0c:	b2e4      	uxtb	r4, r4
 8001b0e:	e7f7      	b.n	8001b00 <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  xor_mask = 1;
 8001b10:	2401      	movs	r4, #1
 8001b12:	e7f5      	b.n	8001b00 <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  or_mask  = 1;
 8001b14:	4615      	mov	r5, r2
 8001b16:	e7f3      	b.n	8001b00 <u8g2_ll_hvline_vertical_top_lsb+0x78>

08001b18 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001b18:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001b1a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001b1e:	6801      	ldr	r1, [r0, #0]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 8001b20:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
  t *= 8;
 8001b24:	00e3      	lsls	r3, r4, #3
  u8g2->pixel_buf_height = t;
 8001b26:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  t = display_info->tile_width;
 8001b2a:	7c0a      	ldrb	r2, [r1, #16]
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	bf28      	it	cs
 8001b30:	221f      	movcs	r2, #31
  t *= 8;
 8001b32:	00eb      	lsls	r3, r5, #3
 8001b34:	b2db      	uxtb	r3, r3
  t *= 8;
 8001b36:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_curr_row = t;
 8001b38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  u8g2->pixel_buf_width = t;
 8001b3c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001b40:	7c4a      	ldrb	r2, [r1, #17]
    t = display_info->tile_height - u8g2->tile_curr_row;
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001b42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001b46:	1966      	adds	r6, r4, r5
 8001b48:	4296      	cmp	r6, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001b4a:	bfc4      	itt	gt
 8001b4c:	1b54      	subgt	r4, r2, r5
 8001b4e:	b2e4      	uxtbgt	r4, r4
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8001b50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001b54:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8001b58:	23f0      	movs	r3, #240	; 0xf0
 8001b5a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8001b5e:	8a8b      	ldrh	r3, [r1, #20]
 8001b60:	2bf0      	cmp	r3, #240	; 0xf0
    u8g2->width = display_info->pixel_width;
 8001b62:	bf98      	it	ls
 8001b64:	f880 3043 	strbls.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8001b68:	8acb      	ldrh	r3, [r1, #22]
 8001b6a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}

08001b70 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001b70:	b410      	push	{r4}
 8001b72:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001b76:	9401      	str	r4, [sp, #4]
}
 8001b78:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001b7c:	f7ff bee9 	b.w	8001952 <u8g2_draw_hv_line_2dir>

08001b80 <u8g2_apply_clip_window>:
{
 8001b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001b82:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 8001b86:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8001b8a:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8001b8e:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8001b92:	9500      	str	r5, [sp, #0]
{
 8001b94:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001b96:	f7ff ff5f 	bl	8001a58 <u8g2_IsIntersection>
 8001b9a:	b918      	cbnz	r0, 8001ba4 <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 8001b9c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8001ba0:	b003      	add	sp, #12
 8001ba2:	bd30      	pop	{r4, r5, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8001ba4:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001ba6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    u8g2->is_page_clip_window_intersection = 1;
 8001baa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001bae:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8001bb2:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8001bb4:	bf38      	it	cc
 8001bb6:	f884 3045 	strbcc.w	r3, [r4, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001bba:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001bbe:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8001bc2:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8001bc4:	bf88      	it	hi
 8001bc6:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001bca:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8001bce:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001bd2:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8001bd4:	bf38      	it	cc
 8001bd6:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001bda:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8001bde:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8001be2:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 8001be4:	bf88      	it	hi
 8001be6:	f884 3048 	strbhi.w	r3, [r4, #72]	; 0x48
}
 8001bea:	e7d9      	b.n	8001ba0 <u8g2_apply_clip_window+0x20>

08001bec <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8001bec:	2200      	movs	r2, #0
 8001bee:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8001bf2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001bf6:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  u8g2->user_y0 = u8g2->buf_y0;
 8001bfa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001bfe:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8001c02:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8001c06:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  u8g2_apply_clip_window(u8g2);
 8001c0a:	f7ff bfb9 	b.w	8001b80 <u8g2_apply_clip_window>

08001c0e <u8g2_update_dimension_r0>:
 8001c0e:	f7ff bf83 	b.w	8001b18 <u8g2_update_dimension_common>

08001c12 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8001c12:	2200      	movs	r2, #0
 8001c14:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8001c18:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
  u8g2->cb->update_page_win(u8g2);
 8001c1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001c1e:	22ff      	movs	r2, #255	; 0xff
 8001c20:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001c24:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  u8g2->cb->update_page_win(u8g2);
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4718      	bx	r3

08001c2c <u8g2_SetupBuffer>:
{
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	9e04      	ldr	r6, [sp, #16]
  u8g2->ll_hvline = ll_hvline_cb;
 8001c30:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->font = NULL;
 8001c32:	2500      	movs	r5, #0
  u8g2->draw_color = 1;
 8001c34:	2301      	movs	r3, #1
  u8g2->tile_buf_height = tile_buf_height;
 8001c36:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 8001c3a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001c3e:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8001c42:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
  u8g2->draw_color = 1;
 8001c46:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8001c4a:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
{
 8001c4e:	4604      	mov	r4, r0
  u8g2->tile_buf_ptr = buf;
 8001c50:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->cb->update_dimension(u8g2);
 8001c52:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 8001c54:	6505      	str	r5, [r0, #80]	; 0x50
  u8g2->cb = u8g2_cb;
 8001c56:	6346      	str	r6, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8001c58:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffd9 	bl	8001c12 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff fe61 	bl	8001928 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8001c66:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}

08001c6c <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001c6c:	b119      	cbz	r1, 8001c76 <u8x8_ascii_next+0xa>
 8001c6e:	290a      	cmp	r1, #10
 8001c70:	d001      	beq.n	8001c76 <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8001c72:	b288      	uxth	r0, r1
 8001c74:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 8001c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8001c7a:	4770      	bx	lr

08001c7c <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8001c82:	4770      	bx	lr

08001c84 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001c84:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001c86:	6904      	ldr	r4, [r0, #16]
 8001c88:	460a      	mov	r2, r1
 8001c8a:	46a4      	mov	ip, r4
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2120      	movs	r1, #32
}
 8001c90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001c94:	4760      	bx	ip

08001c96 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c96:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001c98:	6904      	ldr	r4, [r0, #16]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	460a      	mov	r2, r1
}
 8001ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001ca4:	2117      	movs	r1, #23
 8001ca6:	4760      	bx	ip

08001ca8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001ca8:	b507      	push	{r0, r1, r2, lr}
 8001caa:	aa02      	add	r2, sp, #8
 8001cac:	f802 1d01 	strb.w	r1, [r2, #-1]!
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f7ff fff0 	bl	8001c96 <u8x8_byte_SendBytes>
}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	f85d fb04 	ldr.w	pc, [sp], #4

08001cbc <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001cbc:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001cbe:	68c4      	ldr	r4, [r0, #12]
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	46a4      	mov	ip, r4
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2115      	movs	r1, #21
}
 8001cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001ccc:	4760      	bx	ip

08001cce <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001cce:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001cd0:	68c4      	ldr	r4, [r0, #12]
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	46a4      	mov	ip, r4
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2116      	movs	r1, #22
}
 8001cda:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001cde:	4760      	bx	ip

08001ce0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001ce0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001ce2:	68c4      	ldr	r4, [r0, #12]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	46a4      	mov	ip, r4
 8001ce8:	460a      	mov	r2, r1
}
 8001cea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001cee:	2117      	movs	r1, #23
 8001cf0:	4760      	bx	ip

08001cf2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001cf2:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001cf4:	68c4      	ldr	r4, [r0, #12]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	46a4      	mov	ip, r4
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2118      	movs	r1, #24
}
 8001cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001d02:	4760      	bx	ip

08001d04 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001d04:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001d06:	68c4      	ldr	r4, [r0, #12]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	46a4      	mov	ip, r4
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2119      	movs	r1, #25
}
 8001d10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001d14:	4760      	bx	ip

08001d16 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d18:	4605      	mov	r5, r0
 8001d1a:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001d1c:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 8001d1e:	2917      	cmp	r1, #23
 8001d20:	d019      	beq.n	8001d56 <u8x8_cad_SendSequence+0x40>
 8001d22:	d803      	bhi.n	8001d2c <u8x8_cad_SendSequence+0x16>
 8001d24:	2915      	cmp	r1, #21
 8001d26:	d20d      	bcs.n	8001d44 <u8x8_cad_SendSequence+0x2e>
	  break;
      default:
	return;
    }
  }
}
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
    switch( cmd )
 8001d2c:	2919      	cmp	r1, #25
 8001d2e:	d91c      	bls.n	8001d6a <u8x8_cad_SendSequence+0x54>
 8001d30:	29fe      	cmp	r1, #254	; 0xfe
 8001d32:	d1f9      	bne.n	8001d28 <u8x8_cad_SendSequence+0x12>
	  v = *data;
 8001d34:	7862      	ldrb	r2, [r4, #1]
 8001d36:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001d3a:	2129      	movs	r1, #41	; 0x29
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 f987 	bl	8002050 <u8x8_gpio_call>
 8001d42:	e006      	b.n	8001d52 <u8x8_cad_SendSequence+0x3c>
	  v = *data;
 8001d44:	7862      	ldrb	r2, [r4, #1]
 8001d46:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001d4a:	68ee      	ldr	r6, [r5, #12]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4628      	mov	r0, r5
 8001d50:	47b0      	blx	r6
	  data++;
 8001d52:	3402      	adds	r4, #2
	  break;
 8001d54:	e7e2      	b.n	8001d1c <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8001d56:	7863      	ldrb	r3, [r4, #1]
 8001d58:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001d5c:	f10d 0207 	add.w	r2, sp, #7
 8001d60:	2101      	movs	r1, #1
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff ffbc 	bl	8001ce0 <u8x8_cad_SendData>
 8001d68:	e7f3      	b.n	8001d52 <u8x8_cad_SendSequence+0x3c>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	68ee      	ldr	r6, [r5, #12]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4628      	mov	r0, r5
    data++;
 8001d72:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001d74:	47b0      	blx	r6
	  break;
 8001d76:	e7d1      	b.n	8001d1c <u8x8_cad_SendSequence+0x6>

08001d78 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d7c:	4615      	mov	r5, r2
  switch(msg)
 8001d7e:	f1a1 0214 	sub.w	r2, r1, #20
{
 8001d82:	4604      	mov	r4, r0
 8001d84:	460e      	mov	r6, r1
 8001d86:	4698      	mov	r8, r3
  switch(msg)
 8001d88:	2a05      	cmp	r2, #5
 8001d8a:	d81d      	bhi.n	8001dc8 <u8x8_cad_011+0x50>
 8001d8c:	e8df f002 	tbb	[pc, r2]
 8001d90:	100e0313 	.word	0x100e0313
 8001d94:	1313      	.short	0x1313
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001d96:	2100      	movs	r1, #0
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff ff73 	bl	8001c84 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ff81 	bl	8001ca8 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 8001da6:	2001      	movs	r0, #1
      break;
 8001da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SetDC(u8x8, 1);
 8001dac:	2101      	movs	r1, #1
 8001dae:	e7f3      	b.n	8001d98 <u8x8_cad_011+0x20>
      u8x8_byte_SetDC(u8x8, 1);
 8001db0:	2101      	movs	r1, #1
 8001db2:	f7ff ff67 	bl	8001c84 <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001db6:	6927      	ldr	r7, [r4, #16]
 8001db8:	4643      	mov	r3, r8
 8001dba:	462a      	mov	r2, r5
 8001dbc:	4631      	mov	r1, r6
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	46bc      	mov	ip, r7
}
 8001dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001dc6:	4760      	bx	ip
      return 0;
 8001dc8:	2000      	movs	r0, #0
}
 8001dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001dd0 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8001dd4:	290e      	cmp	r1, #14
{
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	4604      	mov	r4, r0
 8001dda:	4615      	mov	r5, r2
 8001ddc:	4698      	mov	r8, r3
  switch(msg)
 8001dde:	d00e      	beq.n	8001dfe <u8x8_d_ssd1322_common+0x2e>
 8001de0:	290f      	cmp	r1, #15
 8001de2:	d01a      	beq.n	8001e1a <u8x8_d_ssd1322_common+0x4a>
 8001de4:	290b      	cmp	r1, #11
 8001de6:	f040 8091 	bne.w	8001f0c <u8x8_d_ssd1322_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001dea:	b932      	cbnz	r2, 8001dfa <u8x8_d_ssd1322_common+0x2a>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 8001dec:	4948      	ldr	r1, [pc, #288]	; (8001f10 <u8x8_d_ssd1322_common+0x140>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 8001dee:	f7ff ff92 	bl	8001d16 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8001df2:	2001      	movs	r0, #1
}
 8001df4:	b005      	add	sp, #20
 8001df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 8001dfa:	4946      	ldr	r1, [pc, #280]	; (8001f14 <u8x8_d_ssd1322_common+0x144>)
 8001dfc:	e7f7      	b.n	8001dee <u8x8_d_ssd1322_common+0x1e>
      u8x8_cad_StartTransfer(u8x8);
 8001dfe:	f7ff ff78 	bl	8001cf2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 8001e02:	21c1      	movs	r1, #193	; 0xc1
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff ff59 	bl	8001cbc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff ff5e 	bl	8001cce <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff ff76 	bl	8001d04 <u8x8_cad_EndTransfer>
 8001e18:	e7eb      	b.n	8001df2 <u8x8_d_ssd1322_common+0x22>
      u8x8_cad_StartTransfer(u8x8);
 8001e1a:	f7ff ff6a 	bl	8001cf2 <u8x8_cad_StartTransfer>
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8001e1e:	f898 7006 	ldrb.w	r7, [r8, #6]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001e22:	f898 3005 	ldrb.w	r3, [r8, #5]
      x += u8x8->x_offset;		
 8001e26:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
 8001e2a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8001f18 <u8x8_d_ssd1322_common+0x148>
      y *= 8;
 8001e2e:	00ff      	lsls	r7, r7, #3
 8001e30:	b2ff      	uxtb	r7, r7
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8001e32:	2175      	movs	r1, #117	; 0x75
 8001e34:	4620      	mov	r0, r4
      x += u8x8->x_offset;		
 8001e36:	eb06 0643 	add.w	r6, r6, r3, lsl #1
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8001e3a:	f7ff ff3f 	bl	8001cbc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8001e3e:	4639      	mov	r1, r7
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ff44 	bl	8001cce <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8001e46:	1df9      	adds	r1, r7, #7
 8001e48:	b2c9      	uxtb	r1, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff ff3f 	bl	8001cce <u8x8_cad_SendArg>
      x += u8x8->x_offset;		
 8001e50:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001e54:	f898 b004 	ldrb.w	fp, [r8, #4]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001e58:	f8d8 2000 	ldr.w	r2, [r8]
 8001e5c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2108      	movs	r1, #8
 8001e64:	200a      	movs	r0, #10
 8001e66:	fb11 0303 	smlabb	r3, r1, r3, r0
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	f102 0902 	add.w	r9, r2, #2
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	4637      	mov	r7, r6
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 8001e74:	2115      	movs	r1, #21
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff ff20 	bl	8001cbc <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8001e7c:	4639      	mov	r1, r7
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff ff25 	bl	8001cce <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 8001e84:	1c79      	adds	r1, r7, #1
 8001e86:	b2c9      	uxtb	r1, r1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff ff20 	bl	8001cce <u8x8_cad_SendArg>
	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 8001e8e:	215c      	movs	r1, #92	; 0x5c
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ff13 	bl	8001cbc <u8x8_cad_SendCmd>
 8001e96:	464a      	mov	r2, r9
 8001e98:	2300      	movs	r3, #0
 8001e9a:	eb0a 0103 	add.w	r1, sl, r3
 8001e9e:	9103      	str	r1, [sp, #12]
    a =*ptr;
 8001ea0:	f812 ec02 	ldrb.w	lr, [r2, #-2]
    b = *ptr;
 8001ea4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001ea8:	9101      	str	r1, [sp, #4]
 8001eaa:	2100      	movs	r1, #0
      if ( b&1 ) v |= 0x0f;
 8001eac:	9801      	ldr	r0, [sp, #4]
      if ( a&1 ) v |= 0xf0;
 8001eae:	f01e 0f01 	tst.w	lr, #1
 8001eb2:	bf0c      	ite	eq
 8001eb4:	f04f 0c00 	moveq.w	ip, #0
 8001eb8:	f04f 0cf0 	movne.w	ip, #240	; 0xf0
      if ( b&1 ) v |= 0x0f;
 8001ebc:	07c0      	lsls	r0, r0, #31
      *dest = v;
 8001ebe:	9803      	ldr	r0, [sp, #12]
      if ( b&1 ) v |= 0x0f;
 8001ec0:	bf48      	it	mi
 8001ec2:	f04c 0c0f 	orrmi.w	ip, ip, #15
      *dest = v;
 8001ec6:	f800 c021 	strb.w	ip, [r0, r1, lsl #2]
      b >>= 1;
 8001eca:	9801      	ldr	r0, [sp, #4]
 8001ecc:	3101      	adds	r1, #1
 8001ece:	0840      	lsrs	r0, r0, #1
    for( i = 0; i < 8; i++ )
 8001ed0:	2908      	cmp	r1, #8
      a >>= 1;
 8001ed2:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
      b >>= 1;
 8001ed6:	9001      	str	r0, [sp, #4]
    for( i = 0; i < 8; i++ )
 8001ed8:	d1e8      	bne.n	8001eac <u8x8_d_ssd1322_common+0xdc>
 8001eda:	3301      	adds	r3, #1
  for( j = 0; j < 4; j++ )
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	f102 0202 	add.w	r2, r2, #2
 8001ee2:	d1da      	bne.n	8001e9a <u8x8_d_ssd1322_common+0xca>
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff fef9 	bl	8001ce0 <u8x8_cad_SendData>
	} while( c > 0 );
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	f109 0908 	add.w	r9, r9, #8
	  x += 2;
 8001ef4:	3702      	adds	r7, #2
	} while( c > 0 );
 8001ef6:	454b      	cmp	r3, r9
	  x += 2;
 8001ef8:	b2ff      	uxtb	r7, r7
	} while( c > 0 );
 8001efa:	d1bb      	bne.n	8001e74 <u8x8_d_ssd1322_common+0xa4>
	arg_int--;
 8001efc:	3d01      	subs	r5, #1
 8001efe:	eb06 064b 	add.w	r6, r6, fp, lsl #1
      } while( arg_int > 0 );
 8001f02:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001f06:	b2f6      	uxtb	r6, r6
 8001f08:	d1a4      	bne.n	8001e54 <u8x8_d_ssd1322_common+0x84>
 8001f0a:	e782      	b.n	8001e12 <u8x8_d_ssd1322_common+0x42>
      return 0;
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e771      	b.n	8001df4 <u8x8_d_ssd1322_common+0x24>
 8001f10:	08004dd1 	.word	0x08004dd1
 8001f14:	08004dd6 	.word	0x08004dd6
 8001f18:	200006f8 	.word	0x200006f8

08001f1c <u8x8_d_ssd1322_nhd_256x64>:
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 8001f1c:	290a      	cmp	r1, #10
{
 8001f1e:	b570      	push	{r4, r5, r6, lr}
 8001f20:	4604      	mov	r4, r0
  switch(msg)
 8001f22:	d008      	beq.n	8001f36 <u8x8_d_ssd1322_nhd_256x64+0x1a>
 8001f24:	290d      	cmp	r1, #13
 8001f26:	d00d      	beq.n	8001f44 <u8x8_d_ssd1322_nhd_256x64+0x28>
 8001f28:	2909      	cmp	r1, #9
 8001f2a:	d11a      	bne.n	8001f62 <u8x8_d_ssd1322_nhd_256x64+0x46>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 8001f2c:	490f      	ldr	r1, [pc, #60]	; (8001f6c <u8x8_d_ssd1322_nhd_256x64+0x50>)
 8001f2e:	f000 f825 	bl	8001f7c <u8x8_d_helper_display_setup_memory>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
}
 8001f32:	2001      	movs	r0, #1
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
      u8x8_d_helper_display_init(u8x8);
 8001f36:	f000 f826 	bl	8001f86 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <u8x8_d_ssd1322_nhd_256x64+0x54>)
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff feea 	bl	8001d16 <u8x8_cad_SendSequence>
      break;
 8001f42:	e7f6      	b.n	8001f32 <u8x8_d_ssd1322_nhd_256x64+0x16>
      if ( arg_int == 0 )
 8001f44:	b93a      	cbnz	r2, 8001f56 <u8x8_d_ssd1322_nhd_256x64+0x3a>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 8001f46:	490b      	ldr	r1, [pc, #44]	; (8001f74 <u8x8_d_ssd1322_nhd_256x64+0x58>)
 8001f48:	f7ff fee5 	bl	8001d16 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001f50:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8001f54:	e7ed      	b.n	8001f32 <u8x8_d_ssd1322_nhd_256x64+0x16>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <u8x8_d_ssd1322_nhd_256x64+0x5c>)
 8001f58:	f7ff fedd 	bl	8001d16 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	7cdb      	ldrb	r3, [r3, #19]
 8001f60:	e7f6      	b.n	8001f50 <u8x8_d_ssd1322_nhd_256x64+0x34>
}
 8001f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 8001f66:	f7ff bf33 	b.w	8001dd0 <u8x8_d_ssd1322_common>
 8001f6a:	bf00      	nop
 8001f6c:	08004ddc 	.word	0x08004ddc
 8001f70:	08004d7e 	.word	0x08004d7e
 8001f74:	08004d6c 	.word	0x08004d6c
 8001f78:	08004d75 	.word	0x08004d75

08001f7c <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001f7c:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001f7e:	7c8b      	ldrb	r3, [r1, #18]
 8001f80:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8001f84:	4770      	bx	lr

08001f86 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001f86:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001f88:	2300      	movs	r3, #0
{
 8001f8a:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6945      	ldr	r5, [r0, #20]
 8001f90:	2128      	movs	r1, #40	; 0x28
 8001f92:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8001f94:	2300      	movs	r3, #0
 8001f96:	461a      	mov	r2, r3
 8001f98:	68e5      	ldr	r5, [r4, #12]
 8001f9a:	2114      	movs	r1, #20
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	214b      	movs	r1, #75	; 0x4b
 8001fa6:	f000 f853 	bl	8002050 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	4620      	mov	r0, r4
 8001fae:	791a      	ldrb	r2, [r3, #4]
 8001fb0:	2129      	movs	r1, #41	; 0x29
 8001fb2:	f000 f84d 	bl	8002050 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	214b      	movs	r1, #75	; 0x4b
 8001fbc:	f000 f848 	bl	8002050 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	791a      	ldrb	r2, [r3, #4]
 8001fc6:	2129      	movs	r1, #41	; 0x29
 8001fc8:	f000 f842 	bl	8002050 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	2201      	movs	r2, #1
 8001fd0:	214b      	movs	r1, #75	; 0x4b
 8001fd2:	f000 f83d 	bl	8002050 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	4620      	mov	r0, r4
 8001fda:	795a      	ldrb	r2, [r3, #5]
 8001fdc:	2129      	movs	r1, #41	; 0x29
}    
 8001fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001fe2:	f000 b835 	b.w	8002050 <u8x8_gpio_call>

08001fe6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001fe6:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
 8001fe8:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8001fec:	ab02      	add	r3, sp, #8
  tile.y_pos = y;
 8001fee:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.tile_ptr = tile_ptr;
 8001ff2:	9a04      	ldr	r2, [sp, #16]
  tile.x_pos = x;
 8001ff4:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.tile_ptr = tile_ptr;
 8001ff8:	f843 2d08 	str.w	r2, [r3, #-8]!
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8001ffc:	6884      	ldr	r4, [r0, #8]
 8001ffe:	2201      	movs	r2, #1
 8002000:	210f      	movs	r1, #15
 8002002:	47a0      	blx	r4
}
 8002004:	b002      	add	sp, #8
 8002006:	bd10      	pop	{r4, pc}

08002008 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002008:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800200a:	6884      	ldr	r4, [r0, #8]
 800200c:	2300      	movs	r3, #0
 800200e:	46a4      	mov	ip, r4
 8002010:	461a      	mov	r2, r3
 8002012:	2109      	movs	r1, #9
}
 8002014:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002018:	4760      	bx	ip

0800201a <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800201a:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800201c:	6884      	ldr	r4, [r0, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	46a4      	mov	ip, r4
 8002022:	461a      	mov	r2, r3
 8002024:	210a      	movs	r1, #10
}
 8002026:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800202a:	4760      	bx	ip

0800202c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800202c:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800202e:	6884      	ldr	r4, [r0, #8]
 8002030:	460a      	mov	r2, r1
 8002032:	46a4      	mov	ip, r4
 8002034:	2300      	movs	r3, #0
 8002036:	210b      	movs	r1, #11
}
 8002038:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800203c:	4760      	bx	ip

0800203e <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800203e:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002040:	6884      	ldr	r4, [r0, #8]
 8002042:	2300      	movs	r3, #0
 8002044:	46a4      	mov	ip, r4
 8002046:	461a      	mov	r2, r3
 8002048:	2110      	movs	r1, #16
}
 800204a:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800204e:	4760      	bx	ip

08002050 <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002050:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002052:	6944      	ldr	r4, [r0, #20]
 8002054:	2300      	movs	r3, #0
 8002056:	46a4      	mov	ip, r4
}
 8002058:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800205c:	4760      	bx	ip

0800205e <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 800205e:	2000      	movs	r0, #0
 8002060:	4770      	bx	lr
	...

08002064 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002064:	2300      	movs	r3, #0
    u8x8->display_cb = u8x8_dummy_cb;
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <u8x8_SetupDefaults+0x28>)
    u8x8->display_info = NULL;
 8002068:	6003      	str	r3, [r0, #0]
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 800206a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 800206e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002072:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    u8x8->i2c_address = 255;
 8002076:	23ff      	movs	r3, #255	; 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 8002078:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800207a:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800207c:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800207e:	6142      	str	r2, [r0, #20]
    u8x8->i2c_address = 255;
 8002080:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002084:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800205f 	.word	0x0800205f

08002090 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	9d06      	ldr	r5, [sp, #24]
 8002094:	4617      	mov	r7, r2
 8002096:	461e      	mov	r6, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002098:	f7ff ffe4 	bl	8002064 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 800209c:	60c7      	str	r7, [r0, #12]
  u8x8->byte_cb = byte_cb;
 800209e:	6106      	str	r6, [r0, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80020a0:	6145      	str	r5, [r0, #20]
  u8x8->display_cb = display_cb;
 80020a2:	6081      	str	r1, [r0, #8]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 80020a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 80020a8:	f7ff bfae 	b.w	8002008 <u8x8_SetupMemory>

080020ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80020ac:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_DMA_Init+0x30>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80020ba:	6319      	str	r1, [r3, #48]	; 0x30
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020c4:	4611      	mov	r1, r2
 80020c6:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020c8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020ca:	f7fe fa7b 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020ce:	203b      	movs	r0, #59	; 0x3b
 80020d0:	f7fe faac 	bl	800062c <HAL_NVIC_EnableIRQ>

}
 80020d4:	b003      	add	sp, #12
 80020d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80020e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e4:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	2214      	movs	r2, #20
 80020e8:	2100      	movs	r1, #0
 80020ea:	a809      	add	r0, sp, #36	; 0x24
 80020ec:	f000 fb9a 	bl	8002824 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f0:	2400      	movs	r4, #0
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <MX_GPIO_Init+0x1f4>)
 80020f4:	9403      	str	r4, [sp, #12]
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020f8:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80022e0 <MX_GPIO_Init+0x200>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020fc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80022e4 <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_soft_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002100:	4f75      	ldr	r7, [pc, #468]	; (80022d8 <MX_GPIO_Init+0x1f8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002102:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80022e8 <MX_GPIO_Init+0x208>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002106:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80022ec <MX_GPIO_Init+0x20c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800210a:	f042 0210 	orr.w	r2, r2, #16
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
 8002110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002112:	f002 0210 	and.w	r2, r2, #16
 8002116:	9203      	str	r2, [sp, #12]
 8002118:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	9404      	str	r4, [sp, #16]
 800211c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211e:	f042 0204 	orr.w	r2, r2, #4
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002126:	f002 0204 	and.w	r2, r2, #4
 800212a:	9204      	str	r2, [sp, #16]
 800212c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	9405      	str	r4, [sp, #20]
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800213e:	9205      	str	r2, [sp, #20]
 8002140:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	9406      	str	r4, [sp, #24]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
 800214c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214e:	f002 0201 	and.w	r2, r2, #1
 8002152:	9206      	str	r2, [sp, #24]
 8002154:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	9407      	str	r4, [sp, #28]
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
 8002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002162:	f002 0202 	and.w	r2, r2, #2
 8002166:	9207      	str	r2, [sp, #28]
 8002168:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	9408      	str	r4, [sp, #32]
 800216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800217c:	4622      	mov	r2, r4
 800217e:	4648      	mov	r0, r9
 8002180:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002184:	f7fe fca4 	bl	8000ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	4611      	mov	r1, r2
 800218c:	4640      	mov	r0, r8
 800218e:	f7fe fc9f 	bl	8000ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_soft_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002192:	4622      	mov	r2, r4
 8002194:	4638      	mov	r0, r7
 8002196:	2150      	movs	r1, #80	; 0x50
 8002198:	f7fe fc9a 	bl	8000ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 800219c:	4622      	mov	r2, r4
 800219e:	4640      	mov	r0, r8
 80021a0:	2110      	movs	r1, #16
 80021a2:	f7fe fc95 	bl	8000ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80021a6:	4622      	mov	r2, r4
 80021a8:	4658      	mov	r0, fp
 80021aa:	f24f 0110 	movw	r1, #61456	; 0xf010
 80021ae:	f7fe fc8f 	bl	8000ad0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021b4:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021b6:	a909      	add	r1, sp, #36	; 0x24
 80021b8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021ba:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021bc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f7fe fba5 	bl	8000910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OLED_RES_Pin;
 80021c6:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	a909      	add	r1, sp, #36	; 0x24
 80021ca:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OLED_RES_Pin;
 80021cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f7fe fb9c 	bl	8000910 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d8:	2205      	movs	r2, #5
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80021da:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021dc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021e0:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e2:	920d      	str	r2, [sp, #52]	; 0x34
 80021e4:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f7fe fb90 	bl	8000910 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <MX_GPIO_Init+0x1fc>)
 80021f2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021f4:	a909      	add	r1, sp, #36	; 0x24
 80021f6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 80021f8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f7fe fb88 	bl	8000910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_CS_soft_Pin|D_C_Pin;
 8002200:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	a909      	add	r1, sp, #36	; 0x24
 8002204:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI1_CS_soft_Pin|D_C_Pin;
 8002206:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f7fe fb7f 	bl	8000910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002212:	2304      	movs	r3, #4
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002214:	a909      	add	r1, sp, #36	; 0x24
 8002216:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002218:	9309      	str	r3, [sp, #36]	; 0x24
 800221a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002220:	f7fe fb76 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002228:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800222a:	9109      	str	r1, [sp, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800222c:	4650      	mov	r0, sl
 800222e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002230:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002238:	f7fe fb6a 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800223c:	f24f 0210 	movw	r2, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002240:	a909      	add	r1, sp, #36	; 0x24
 8002242:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002244:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f7fe fb60 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002250:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 8002254:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002258:	2206      	movs	r2, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800225c:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f7fe fb54 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002268:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800226c:	a909      	add	r1, sp, #36	; 0x24
 800226e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002270:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002276:	f7fe fb4b 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800227a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800227e:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002282:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002286:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f7fe fb3f 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002292:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002294:	a909      	add	r1, sp, #36	; 0x24
 8002296:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002298:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800229e:	f7fe fb37 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80022a2:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80022a8:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2212      	movs	r2, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b0:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022b2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f7fe fb2a 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80022be:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80022c0:	a909      	add	r1, sp, #36	; 0x24
 80022c2:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022c4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f7fe fb22 	bl	8000910 <HAL_GPIO_Init>

}
 80022cc:	b00f      	add	sp, #60	; 0x3c
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	10120000 	.word	0x10120000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40020400 	.word	0x40020400

080022f0 <u8x8_stm32_gpio_and_delay>:

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
    U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
  switch (msg)
 80022f0:	2929      	cmp	r1, #41	; 0x29
{
 80022f2:	b508      	push	{r3, lr}
 80022f4:	4610      	mov	r0, r2
  switch (msg)
 80022f6:	d00c      	beq.n	8002312 <u8x8_stm32_gpio_and_delay+0x22>
 80022f8:	d803      	bhi.n	8002302 <u8x8_stm32_gpio_and_delay+0x12>
 80022fa:	2928      	cmp	r1, #40	; 0x28
 80022fc:	d008      	beq.n	8002310 <u8x8_stm32_gpio_and_delay+0x20>
  case U8X8_MSG_GPIO_RESET:
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
    break;
  }
  return 1;
}
 80022fe:	2001      	movs	r0, #1
 8002300:	bd08      	pop	{r3, pc}
  switch (msg)
 8002302:	294a      	cmp	r1, #74	; 0x4a
 8002304:	d008      	beq.n	8002318 <u8x8_stm32_gpio_and_delay+0x28>
 8002306:	294b      	cmp	r1, #75	; 0x4b
 8002308:	d1f9      	bne.n	80022fe <u8x8_stm32_gpio_and_delay+0xe>
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 800230a:	2110      	movs	r1, #16
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <u8x8_stm32_gpio_and_delay+0x34>)
 800230e:	e005      	b.n	800231c <u8x8_stm32_gpio_and_delay+0x2c>
    HAL_Delay(1);
 8002310:	2001      	movs	r0, #1
    HAL_Delay(arg_int);
 8002312:	f7fe f931 	bl	8000578 <HAL_Delay>
    break;
 8002316:	e7f2      	b.n	80022fe <u8x8_stm32_gpio_and_delay+0xe>
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, arg_int);
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <u8x8_stm32_gpio_and_delay+0x38>)
 800231a:	2140      	movs	r1, #64	; 0x40
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 800231c:	f7fe fbd8 	bl	8000ad0 <HAL_GPIO_WritePin>
    break;
 8002320:	e7ed      	b.n	80022fe <u8x8_stm32_gpio_and_delay+0xe>
 8002322:	bf00      	nop
 8002324:	40020800 	.word	0x40020800
 8002328:	40020000 	.word	0x40020000

0800232c <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
    void *arg_ptr)
{
  switch (msg)
 800232c:	3914      	subs	r1, #20
{
 800232e:	b508      	push	{r3, lr}
 8002330:	4618      	mov	r0, r3
  switch (msg)
 8002332:	290c      	cmp	r1, #12
 8002334:	d820      	bhi.n	8002378 <u8x8_byte_4wire_hw_spi+0x4c>
 8002336:	e8df f001 	tbb	[pc, r1]
 800233a:	1f0d      	.short	0x1f0d
 800233c:	1b14071f 	.word	0x1b14071f
 8002340:	1f1f1f1f 	.word	0x1f1f1f1f
 8002344:	1f1f      	.short	0x1f1f
 8002346:	0f          	.byte	0x0f
 8002347:	00          	.byte	0x00
  {
  case U8X8_MSG_BYTE_SEND:
    HAL_SPI_Transmit(&hspi2, (uint8_t *) arg_ptr, arg_int, 10000);
 8002348:	4601      	mov	r1, r0
 800234a:	f242 7310 	movw	r3, #10000	; 0x2710
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <u8x8_byte_4wire_hw_spi+0x50>)
 8002350:	f7fe fedb 	bl	800110a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_soft_GPIO_Port, SPI1_CS_soft_Pin, GPIO_PIN_RESET);
    break;
  default:
    return 0;
  }
  return 1;
 8002354:	2001      	movs	r0, #1
    break;
 8002356:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, arg_int);
 8002358:	2140      	movs	r1, #64	; 0x40
	HAL_GPIO_WritePin(SPI1_CS_soft_GPIO_Port, SPI1_CS_soft_Pin, GPIO_PIN_RESET);
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <u8x8_byte_4wire_hw_spi+0x54>)
 800235c:	f7fe fbb8 	bl	8000ad0 <HAL_GPIO_WritePin>
 8002360:	e7f8      	b.n	8002354 <u8x8_byte_4wire_hw_spi+0x28>
	HAL_GPIO_WritePin(SPI1_CS_soft_GPIO_Port, SPI1_CS_soft_Pin, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2110      	movs	r1, #16
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <u8x8_byte_4wire_hw_spi+0x54>)
 8002368:	f7fe fbb2 	bl	8000ad0 <HAL_GPIO_WritePin>
	__NOP(); // 21 ns
 800236c:	bf00      	nop
 800236e:	e7f1      	b.n	8002354 <u8x8_byte_4wire_hw_spi+0x28>
	__NOP(); // 21 ns
 8002370:	bf00      	nop
	HAL_GPIO_WritePin(SPI1_CS_soft_GPIO_Port, SPI1_CS_soft_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2110      	movs	r1, #16
 8002376:	e7f0      	b.n	800235a <u8x8_byte_4wire_hw_spi+0x2e>
    return 0;
 8002378:	2000      	movs	r0, #0
}
 800237a:	bd08      	pop	{r3, pc}
 800237c:	200007a4 	.word	0x200007a4
 8002380:	40020000 	.word	0x40020000

08002384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002384:	b530      	push	{r4, r5, lr}
 8002386:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002388:	2230      	movs	r2, #48	; 0x30
 800238a:	2100      	movs	r1, #0
 800238c:	a808      	add	r0, sp, #32
 800238e:	f000 fa49 	bl	8002824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002392:	2100      	movs	r1, #0
 8002394:	2214      	movs	r2, #20
 8002396:	a803      	add	r0, sp, #12
 8002398:	f000 fa44 	bl	8002824 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	2400      	movs	r4, #0
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <SystemClock_Config+0x90>)
 80023a0:	9401      	str	r4, [sp, #4]
 80023a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <SystemClock_Config+0x94>)
 80023b6:	9402      	str	r4, [sp, #8]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023da:	2308      	movs	r3, #8
 80023dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023de:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023e4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023e8:	2307      	movs	r3, #7
 80023ea:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ec:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ee:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f7fe fb74 	bl	8000adc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f4:	230f      	movs	r3, #15
 80023f6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023fe:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002404:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002406:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002408:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800240a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800240c:	f7fe fd3a 	bl	8000e84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002410:	b015      	add	sp, #84	; 0x54
 8002412:	bd30      	pop	{r4, r5, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000

0800241c <LoadWindow>:

/* USER CODE BEGIN 4 */


uint8_t LoadWindow(u8g2_t *u8g2){
 800241c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800241e:	4604      	mov	r4, r0
	 u8g2_FirstPage(u8g2);
 8002420:	f7fe ffc0 	bl	80013a4 <u8g2_FirstPage>
	 do
	{
		 u8g2_DrawXBMP(u8g2, 8, 0, logo51_width, logo51_height, &logo51_bits);
 8002424:	4f21      	ldr	r7, [pc, #132]	; (80024ac <LoadWindow+0x90>)
		 u8g2_SetFont(u8g2, u8g2_font_ncenB10_te);
 8002426:	4e22      	ldr	r6, [pc, #136]	; (80024b0 <LoadWindow+0x94>)
		 u8g2_DrawStr(u8g2, 100, 60, "Loading . ");
 8002428:	4d22      	ldr	r5, [pc, #136]	; (80024b4 <LoadWindow+0x98>)
		 u8g2_DrawXBMP(u8g2, 8, 0, logo51_width, logo51_height, &logo51_bits);
 800242a:	9701      	str	r7, [sp, #4]
 800242c:	2330      	movs	r3, #48	; 0x30
 800242e:	2200      	movs	r2, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2108      	movs	r1, #8
 8002434:	23f3      	movs	r3, #243	; 0xf3
 8002436:	4620      	mov	r0, r4
 8002438:	f7fe ff4f 	bl	80012da <u8g2_DrawXBMP>
		 u8g2_SetFont(u8g2, u8g2_font_ncenB10_te);
 800243c:	4631      	mov	r1, r6
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff fa78 	bl	8001934 <u8g2_SetFont>
		 u8g2_DrawStr(u8g2, 100, 60, "Loading . ");
 8002444:	462b      	mov	r3, r5
 8002446:	223c      	movs	r2, #60	; 0x3c
 8002448:	2164      	movs	r1, #100	; 0x64
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff fa36 	bl	80018bc <u8g2_DrawStr>
	} while (u8g2_NextPage(u8g2));
 8002450:	4620      	mov	r0, r4
 8002452:	f7fe ffb4 	bl	80013be <u8g2_NextPage>
 8002456:	2800      	cmp	r0, #0
 8002458:	d1e7      	bne.n	800242a <LoadWindow+0xe>

	HAL_Delay(500);
 800245a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800245e:	f7fe f88b 	bl	8000578 <HAL_Delay>

	do
	{
		u8g2_DrawStr(u8g2, 100, 60, "Loading . . ");
 8002462:	4d15      	ldr	r5, [pc, #84]	; (80024b8 <LoadWindow+0x9c>)
 8002464:	462b      	mov	r3, r5
 8002466:	223c      	movs	r2, #60	; 0x3c
 8002468:	2164      	movs	r1, #100	; 0x64
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff fa26 	bl	80018bc <u8g2_DrawStr>
	} while (u8g2_NextPage(u8g2));
 8002470:	4620      	mov	r0, r4
 8002472:	f7fe ffa4 	bl	80013be <u8g2_NextPage>
 8002476:	2800      	cmp	r0, #0
 8002478:	d1f4      	bne.n	8002464 <LoadWindow+0x48>

		      HAL_Delay(500);
 800247a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800247e:	f7fe f87b 	bl	8000578 <HAL_Delay>

	do
	{
		u8g2_DrawStr(u8g2, 100, 60, "Loading . . . ");
 8002482:	4e0e      	ldr	r6, [pc, #56]	; (80024bc <LoadWindow+0xa0>)
 8002484:	4633      	mov	r3, r6
 8002486:	223c      	movs	r2, #60	; 0x3c
 8002488:	2164      	movs	r1, #100	; 0x64
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff fa16 	bl	80018bc <u8g2_DrawStr>
	} while (u8g2_NextPage(u8g2));
 8002490:	4620      	mov	r0, r4
 8002492:	f7fe ff94 	bl	80013be <u8g2_NextPage>
 8002496:	4605      	mov	r5, r0
 8002498:	2800      	cmp	r0, #0
 800249a:	d1f3      	bne.n	8002484 <LoadWindow+0x68>
	HAL_Delay(500);
 800249c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024a0:	f7fe f86a 	bl	8000578 <HAL_Delay>
	return 0;
}
 80024a4:	4628      	mov	r0, r5
 80024a6:	b003      	add	sp, #12
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000008 	.word	0x20000008
 80024b0:	08002854 	.word	0x08002854
 80024b4:	08004df4 	.word	0x08004df4
 80024b8:	08004dff 	.word	0x08004dff
 80024bc:	08004e0c 	.word	0x08004e0c

080024c0 <main>:
{
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80024c2:	f7fe f82d 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80024c6:	f7ff ff5d 	bl	8002384 <SystemClock_Config>
  MX_GPIO_Init();
 80024ca:	f7ff fe09 	bl	80020e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024ce:	f7ff fded 	bl	80020ac <MX_DMA_Init>
  MX_SPI1_Init();
 80024d2:	f000 f857 	bl	8002584 <MX_SPI1_Init>
  MX_SPI2_Init();
 80024d6:	f000 f879 	bl	80025cc <MX_SPI2_Init>
  u8g2_Setup_ssd1322_nhd_256x64_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <main+0x9c>)
 80024dc:	4a20      	ldr	r2, [pc, #128]	; (8002560 <main+0xa0>)
 80024de:	4921      	ldr	r1, [pc, #132]	; (8002564 <main+0xa4>)
 80024e0:	4821      	ldr	r0, [pc, #132]	; (8002568 <main+0xa8>)
		 u8g2_FirstPage(&u8g2);
 80024e2:	4c21      	ldr	r4, [pc, #132]	; (8002568 <main+0xa8>)
		 GPIOD->ODR ^= 1<<13;
 80024e4:	4d21      	ldr	r5, [pc, #132]	; (800256c <main+0xac>)
			 u8g2_SetFont(&u8g2, u8g2_font_ncenB10_te);
 80024e6:	4f22      	ldr	r7, [pc, #136]	; (8002570 <main+0xb0>)
  u8g2_Setup_ssd1322_nhd_256x64_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 80024e8:	f7fe ff9e 	bl	8001428 <u8g2_Setup_ssd1322_nhd_256x64_1>
    u8g2_InitDisplay(&u8g2);
 80024ec:	481e      	ldr	r0, [pc, #120]	; (8002568 <main+0xa8>)
 80024ee:	f7ff fd94 	bl	800201a <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 80024f2:	481d      	ldr	r0, [pc, #116]	; (8002568 <main+0xa8>)
 80024f4:	f7fe ff82 	bl	80013fc <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80024f8:	2100      	movs	r1, #0
 80024fa:	481b      	ldr	r0, [pc, #108]	; (8002568 <main+0xa8>)
 80024fc:	f7ff fd96 	bl	800202c <u8x8_SetPowerSave>
    uint32_t testFlag = 0;
 8002500:	2600      	movs	r6, #0
	 if(testFlag < 3){
 8002502:	2e02      	cmp	r6, #2
		 LoadWindow(&u8g2);
 8002504:	4620      	mov	r0, r4
	 if(testFlag < 3){
 8002506:	d807      	bhi.n	8002518 <main+0x58>
		 LoadWindow(&u8g2);
 8002508:	f7ff ff88 	bl	800241c <LoadWindow>
		 testFlag++;
 800250c:	3601      	adds	r6, #1
	 GPIOD->ODR ^= 1<<12;
 800250e:	696b      	ldr	r3, [r5, #20]
 8002510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002514:	616b      	str	r3, [r5, #20]
	 if(testFlag < 3){
 8002516:	e7f4      	b.n	8002502 <main+0x42>
		 u8g2_FirstPage(&u8g2);
 8002518:	f7fe ff44 	bl	80013a4 <u8g2_FirstPage>
		 GPIOD->ODR ^= 1<<13;
 800251c:	696b      	ldr	r3, [r5, #20]
 800251e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002522:	616b      	str	r3, [r5, #20]
			 u8g2_SetFont(&u8g2, u8g2_font_ncenB10_te);
 8002524:	4639      	mov	r1, r7
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fa04 	bl	8001934 <u8g2_SetFont>
			 u8g2_DrawStr(&u8g2, 12, 10, "Temperature");
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <main+0xb4>)
 800252e:	220a      	movs	r2, #10
 8002530:	210c      	movs	r1, #12
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff f9c2 	bl	80018bc <u8g2_DrawStr>
			 u8g2_DrawStr(&u8g2, 12, 30, "Pressure");
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <main+0xb8>)
 800253a:	221e      	movs	r2, #30
 800253c:	210c      	movs	r1, #12
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff f9bc 	bl	80018bc <u8g2_DrawStr>
			 u8g2_DrawStr(&u8g2, 12, 50, "Current");
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <main+0xbc>)
 8002546:	2232      	movs	r2, #50	; 0x32
 8002548:	210c      	movs	r1, #12
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff f9b6 	bl	80018bc <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002550:	4620      	mov	r0, r4
 8002552:	f7fe ff34 	bl	80013be <u8g2_NextPage>
 8002556:	2800      	cmp	r0, #0
 8002558:	d1e4      	bne.n	8002524 <main+0x64>
 800255a:	e7d8      	b.n	800250e <main+0x4e>
 800255c:	080022f1 	.word	0x080022f1
 8002560:	0800232d 	.word	0x0800232d
 8002564:	08004d60 	.word	0x08004d60
 8002568:	20000718 	.word	0x20000718
 800256c:	40020c00 	.word	0x40020c00
 8002570:	08002854 	.word	0x08002854
 8002574:	08004e1b 	.word	0x08004e1b
 8002578:	08004e27 	.word	0x08004e27
 800257c:	08004e30 	.word	0x08004e30

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	4770      	bx	lr
	...

08002584 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002584:	480f      	ldr	r0, [pc, #60]	; (80025c4 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <MX_SPI1_Init+0x44>)
{
 8002588:	b508      	push	{r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800258a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 800258e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002592:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002596:	2300      	movs	r3, #0
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002598:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800259c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800259e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025a0:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025a2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a4:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025a6:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025a8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025aa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025ac:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025ae:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80025b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025b2:	f7fe fd6d 	bl	8001090 <HAL_SPI_Init>
 80025b6:	b118      	cbz	r0, 80025c0 <MX_SPI1_Init+0x3c>
  {
    Error_Handler();
  }

}
 80025b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80025bc:	f7ff bfe0 	b.w	8002580 <Error_Handler>
 80025c0:	bd08      	pop	{r3, pc}
 80025c2:	bf00      	nop
 80025c4:	200007fc 	.word	0x200007fc
 80025c8:	40013000 	.word	0x40013000

080025cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025cc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_SPI2_Init+0x40>)
 80025d2:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025da:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025de:	2300      	movs	r3, #0
 80025e0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025e6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025e8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ea:	6203      	str	r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025ec:	2230      	movs	r2, #48	; 0x30
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ee:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025f2:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025f4:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 80025f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025f8:	f7fe fd4a 	bl	8001090 <HAL_SPI_Init>
 80025fc:	b118      	cbz	r0, 8002606 <MX_SPI2_Init+0x3a>
  {
    Error_Handler();
  }

}
 80025fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002602:	f7ff bfbd 	b.w	8002580 <Error_Handler>
 8002606:	bd08      	pop	{r3, pc}
 8002608:	200007a4 	.word	0x200007a4
 800260c:	40003800 	.word	0x40003800

08002610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002610:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002612:	2214      	movs	r2, #20
{
 8002614:	b08a      	sub	sp, #40	; 0x28
 8002616:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	2100      	movs	r1, #0
 800261a:	eb0d 0002 	add.w	r0, sp, r2
 800261e:	f000 f901 	bl	8002824 <memset>
  if(spiHandle->Instance==SPI1)
 8002622:	6833      	ldr	r3, [r6, #0]
 8002624:	4a32      	ldr	r2, [pc, #200]	; (80026f0 <HAL_SPI_MspInit+0xe0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d13b      	bne.n	80026a2 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262a:	2500      	movs	r5, #0
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_SPI_MspInit+0xe4>)
 800262e:	9501      	str	r5, [sp, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	4831      	ldr	r0, [pc, #196]	; (80026f8 <HAL_SPI_MspInit+0xe8>)

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002634:	4c31      	ldr	r4, [pc, #196]	; (80026fc <HAL_SPI_MspInit+0xec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
 800263c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002642:	9201      	str	r2, [sp, #4]
 8002644:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	9502      	str	r5, [sp, #8]
 8002648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002668:	2305      	movs	r3, #5
 800266a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f7fe f950 	bl	8000910 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002670:	4923      	ldr	r1, [pc, #140]	; (8002700 <HAL_SPI_MspInit+0xf0>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002672:	60e5      	str	r5, [r4, #12]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002674:	2340      	movs	r3, #64	; 0x40
 8002676:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800267a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800267e:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	6165      	str	r5, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002688:	61a5      	str	r5, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800268a:	61e5      	str	r5, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800268c:	6225      	str	r5, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800268e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002690:	f7fe f806 	bl	80006a0 <HAL_DMA_Init>
 8002694:	b108      	cbz	r0, 800269a <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8002696:	f7ff ff73 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800269a:	64b4      	str	r4, [r6, #72]	; 0x48
 800269c:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800269e:	b00a      	add	sp, #40	; 0x28
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_SPI_MspInit+0xf4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d1fa      	bne.n	800269e <HAL_SPI_MspInit+0x8e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_SPI_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	4817      	ldr	r0, [pc, #92]	; (8002708 <HAL_SPI_MspInit+0xf8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ac:	2100      	movs	r1, #0
 80026ae:	9103      	str	r1, [sp, #12]
 80026b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026be:	9203      	str	r2, [sp, #12]
 80026c0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	9104      	str	r1, [sp, #16]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	f042 0202 	orr.w	r2, r2, #2
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	9304      	str	r3, [sp, #16]
 80026d4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026d6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e6:	2305      	movs	r3, #5
 80026e8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f7fe f911 	bl	8000910 <HAL_GPIO_Init>
}
 80026ee:	e7d6      	b.n	800269e <HAL_SPI_MspInit+0x8e>
 80026f0:	40013000 	.word	0x40013000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	20000854 	.word	0x20000854
 8002700:	40026458 	.word	0x40026458
 8002704:	40003800 	.word	0x40003800
 8002708:	40020400 	.word	0x40020400

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_MspInit+0x3c>)
 8002710:	2100      	movs	r1, #0
 8002712:	9100      	str	r1, [sp, #0]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
 800271c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	9101      	str	r1, [sp, #4]
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002738:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800273c:	f7fd ff30 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002740:	b003      	add	sp, #12
 8002742:	f85d fb04 	ldr.w	pc, [sp], #4
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800

0800274c <NMI_Handler>:
 800274c:	4770      	bx	lr

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	e7fe      	b.n	800274e <HardFault_Handler>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	e7fe      	b.n	8002750 <MemManage_Handler>

08002752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler>

08002756 <SVC_Handler>:
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:
 8002758:	4770      	bx	lr

0800275a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275a:	4770      	bx	lr

0800275c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275c:	f7fd befa 	b.w	8000554 <HAL_IncTick>

08002760 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002760:	4801      	ldr	r0, [pc, #4]	; (8002768 <DMA2_Stream3_IRQHandler+0x8>)
 8002762:	f7fe b81b 	b.w	800079c <HAL_DMA_IRQHandler>
 8002766:	bf00      	nop
 8002768:	20000854 	.word	0x20000854

0800276c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SystemInit+0x18>)
 800276e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002772:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800277a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800278c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800278e:	e003      	b.n	8002798 <LoopCopyDataInit>

08002790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002796:	3104      	adds	r1, #4

08002798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800279c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027a0:	d3f6      	bcc.n	8002790 <CopyDataInit>
  ldr  r2, =_sbss
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027a4:	e002      	b.n	80027ac <LoopFillZerobss>

080027a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027a8:	f842 3b04 	str.w	r3, [r2], #4

080027ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027b0:	d3f9      	bcc.n	80027a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027b2:	f7ff ffdb 	bl	800276c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f000 f811 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7ff fe81 	bl	80024c0 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027c4:	08004e58 	.word	0x08004e58
  ldr  r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027cc:	200005dc 	.word	0x200005dc
  ldr  r2, =_sbss
 80027d0:	200005dc 	.word	0x200005dc
  ldr  r3, = _ebss
 80027d4:	200008b4 	.word	0x200008b4

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	4e0d      	ldr	r6, [pc, #52]	; (8002814 <__libc_init_array+0x38>)
 80027e0:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e2:	1ba4      	subs	r4, r4, r6
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	2500      	movs	r5, #0
 80027e8:	42a5      	cmp	r5, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	4e0b      	ldr	r6, [pc, #44]	; (800281c <__libc_init_array+0x40>)
 80027ee:	4c0c      	ldr	r4, [pc, #48]	; (8002820 <__libc_init_array+0x44>)
 80027f0:	f000 f820 	bl	8002834 <_init>
 80027f4:	1ba4      	subs	r4, r4, r6
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	2500      	movs	r5, #0
 80027fa:	42a5      	cmp	r5, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002804:	4798      	blx	r3
 8002806:	3501      	adds	r5, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800280e:	4798      	blx	r3
 8002810:	3501      	adds	r5, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	08004e50 	.word	0x08004e50
 8002818:	08004e50 	.word	0x08004e50
 800281c:	08004e50 	.word	0x08004e50
 8002820:	08004e54 	.word	0x08004e54

08002824 <memset>:
 8002824:	4402      	add	r2, r0
 8002826:	4603      	mov	r3, r0
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	f803 1b01 	strb.w	r1, [r3], #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <_init>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	bf00      	nop
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr

08002840 <_fini>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr
